<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0"><channel><title><![CDATA[Dev Leader Articles]]></title><description><![CDATA[My nearly-daily newsletter focusing on software design, architecture, C#, and DotNet. Join software engineers from companies like Microsoft and Amazon who are already reading!]]></description><link>https://devleader.substack.com</link><image><url>https://substackcdn.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff736b43c-a7d4-475b-96c5-a51c35a9780d_720x720.png</url><title>Dev Leader Articles</title><link>https://devleader.substack.com</link></image><generator>Substack</generator><lastBuildDate>Thu, 11 Apr 2024 11:32:14 GMT</lastBuildDate><atom:link href="https://devleader.substack.com/feed" rel="self" type="application/rss+xml"/><copyright><![CDATA[Nick Cosentino]]></copyright><language><![CDATA[en]]></language><webMaster><![CDATA[social@devleader.ca]]></webMaster><itunes:owner><itunes:email><![CDATA[social@devleader.ca]]></itunes:email><itunes:name><![CDATA[Dev Leader]]></itunes:name></itunes:owner><itunes:author><![CDATA[Dev Leader]]></itunes:author><googleplay:owner><![CDATA[social@devleader.ca]]></googleplay:owner><googleplay:email><![CDATA[social@devleader.ca]]></googleplay:email><googleplay:author><![CDATA[Dev Leader]]></googleplay:author><item><title><![CDATA[Regular Expressions in C#: 3 Examples You Need to Know]]></title><description><![CDATA[If you&#8217;re a beginner software developer then you may have already heard about regular expressions, but you might not have been able to put them into practice yet. No fear! In this article, I&#8217;ll walk you through 3 very simple examples of regular expressions in C#]]></description><link>https://devleader.substack.com/p/regular-expressions-in-csharp-3-examples</link><guid isPermaLink="true">https://devleader.substack.com/p/regular-expressions-in-csharp-3-examples</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Wed, 10 Apr 2024 12:02:34 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/04/02/regular-expressions-in-csharp-3-examples-you-need-to-know/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:50006,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/04/02/regular-expressions-in-csharp-3-examples-you-need-to-know/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F195adc76-1d3a-4699-9a8f-eb8e161fecba_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/04/02/regular-expressions-in-csharp-3-examples-you-need-to-know/">This article was originally posted on my website</a>!</figcaption></figure></div><p>If you&#8217;re a beginner software developer then you may have already heard about regular expressions, but you might not have been able to put them into practice yet. No fear! In this article, I&#8217;ll walk you through 3 very simple <a href="https://www.devleader.ca/2024/04/02/regular-expressions-in-csharp-3-examples-you-need-to-know/">examples of regular expressions in C#</a> to get you started with using them.</p><p>No &#8212; I won&#8217;t be doing a deep dive into complex patterns and super wild and fancy things that you can do with regular expressions. Nope. Just some simple C# examples to get you pointed in the right direction!</p><div><hr></div><h2><strong>1 &#8211; Regex Starts With</strong></h2><p>When working with regular expressions in C#, you can easily match strings that start with a specific pattern. This can be useful in scenarios where you need to find or extract strings that have a particular prefix. And yeah &#8212; I know you&#8217;re probably thinking &#8220;Hey Nick, don&#8217;t we already have <code>string.StartsWith</code> to use?&#8221; &#8212; and you&#8217;re right! But you can&#8217;t use that to <a href="https://www.devleader.ca/2024/04/01/regex-options-in-csharp-beginners-guide-to-powerful-pattern-matching/">match patterns</a> more complex than a string directly.</p><p>To pattern match at the beginning of a string, you&#8217;ll need to use the caret (^) symbol as an anchor in your regular expression pattern. The caret symbol represents the start of a line or string in regular expressions, so by placing it at the beginning of your pattern, you ensure that the match you are looking for occurs at the start of the string.</p><p>To demonstrate this, consider the following code example:</p><pre><code><code>using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

List&lt;string&gt; inputs = new()
{
    "Hello, World!",
    "Something something Hello!",
    "  Hello",
    "Hello from Dev Leader!",
};

string pattern = "^Hello";
Regex regex = new Regex(pattern);

foreach (var input in inputs)
{
    Match match = regex.Match(input);
    Console.WriteLine(
        $"'{input}' {(match.Success ? "did" : "did not")} " +
        "match the string starting with the pattern.");
}</code></code></pre><p>In this example, I&#8217;ve <a href="https://www.devleader.ca/2024/03/20/mudblazor-list-items-how-to-create-awesome-blazor-list-views/">created a list</a> of input strings that we can exercise our regular expression against. We&#8217;ll use a caret at the beginning of the pattern, which otherwise just says &#8220;Hello&#8221;, so effectively we&#8217;re looking for strings that start with Hello. You can <a href="https://dotnetfiddle.net/dA4MEI">try it out directly in your browser with this DotNetFiddle</a>.</p><p>Now a question you *should* be asking yourself is&#8230; is this a good example of using a regular expression instead of string.StartsWith? What do you think the performance of this might be like? Try comparing them in BenchmarkDotNet to find out!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Remember to subscribe for more articles right to your inbox!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>2 &#8211; Regex Ends With</strong></h2><p>If you read the previous section: We&#8217;re talking about going the other way now. If you didn&#8217;t read the previous section: Go read that and then come back and read the first sentence in this section.</p><p>Choose your own adventure! And now we can discuss how to match the end of a string with our regex pattern. To match patterns that end with a particular string, we can use the dollar sign ($) symbol as an anchor in our regular expression pattern. The dollar sign represents the end of the string, ensuring that the specified <a href="https://www.devleader.ca/2024/04/01/regex-options-in-csharp-beginners-guide-to-powerful-pattern-matching/">pattern is only matched</a> if it occurs at the end. Basically the opposite of what we saw with the caret symbol.</p><p>Let&#8217;s consider an example where we want to find all the words in a given text that end with the suffix &#8220;ing&#8221;. We can achieve this using regular expressions in C# with the following code snippet:</p><pre><code><code>using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

List&lt;string&gt; inputs = new()
{
    "Coding", // match
    "I love programming!", // no match
    "Coding is fun!", // no match
    "I love programming", // match
};

string pattern = "ing$";
Regex regex = new Regex(pattern);

foreach (var input in inputs)
{
    Match match = regex.Match(input);
    Console.WriteLine(
        $"'{input}' {(match.Success ? "did" : "did not")} " +
        "match the string ending with the pattern.");
}</code></code></pre><p>Take note of the input strings above because all of them contain &#8220;ing&#8221; but not all of them end with &#8220;ing&#8221;. Which ones will match? If you want to try <a href="https://dotnetfiddle.net/0LLhOA">the Regex ends with example in your browser, check out this DotNetFiddle</a>.</p><div><hr></div><h2><strong>3 &#8211; Regex Is Match</strong></h2><p>While we&#8217;ve been looking at comparisons to other string methods like StartsWith and EndsWith, we can continue this comparison with regex in C#. We know that regex will allow us to do more complex <a href="https://www.devleader.ca/2023/10/01/the-builder-pattern-in-c-how-to-leverage-extension-methods-creatively/">pattern matching compared to these string method</a> variations, so what if we simply want to know if there&#8217;s a pattern match? If you wanted something similar to <code>string.Contains</code> just to know if a pattern matches a string, we can use the <code>Regex.IsMatch()</code> method to perform the pattern matching.</p><p>Note that <code>Regex.IsMatch()</code> will simply return a boolean result instead of a <code>Match</code> type. If you want more information about when your match succeeds, much like in the earlier examples, then you can just use the <code>Match</code> method or even the <code>Matches</code> to get all matching instances within the source string. I wanted to spice it up a bit and use this example just to compare to <code>string.Contains</code>, but if you wanted to compare it to something closer to <code>string.IndexOf</code> to find the position, switch back to the other methods.</p><p>If we don&#8217;t care about beginning or ending matching, we can ditch the ^ and $ symbols in our regular expressions. Let&#8217;s check out this code example that has a slightly more advanced pattern to match:</p><pre><code><code>using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

List&lt;string&gt; inputs = new()
{
    "Nick", // no match
    "Nick1", // no match
    "1Nick", // no match
    "Nick42", // match
    "42Nick", // match
    "4Nick2", // match
    "42", // match
    "1337", // match
    "6", // no match
};

string pattern = "[0-9]+[a-zA-Z]*[0-9]+";
Regex regex = new Regex(pattern);

foreach (var input in inputs)
{
    bool isMatch = regex.IsMatch(input);
    Console.WriteLine(
        $"'{input}' {(isMatch ? "did" : "did not")} " +
        "match the pattern.");
}</code></code></pre><p>In this example, the <code>Regex.IsMatch()</code> method takes in the <code>input</code> variable and the <code>pattern</code> variable was provided to the <code>Regex</code> instance at creation time. If you examine the pattern that we&#8217;re trying to match, we need to have at least 2 numbers with either 0 or many characters from a to z (case not being considered). But what about if we had 2 numbers that were separated by a character that wasn&#8217;t in the English alphabet? <a href="https://dotnetfiddle.net/UhguS9">Try it out for yourself with this DotNetFiddle</a>.</p><div><hr></div><h2><strong>Wrapping Up Regular Expressions in C#</strong></h2><p>As you can see from these examples, regular expressions in C# aren&#8217;t so scary, right? They&#8217;re just a little bit more complicated than doing some other string operations.</p><p>At least, on the surface.</p><p>There are <a href="https://www.devleader.ca/2024/04/01/regex-options-in-csharp-beginners-guide-to-powerful-pattern-matching/">regex options in C#</a> to explore and, of course, the regular expressions that we write can get incredibly complex. Regular expressions can be a powerful tool for us to use, but keep in mind that you&#8217;ll want to balance things out. Consider readability, performance, and other characteristics if you start heavily relying on regular expressions for matching patterns in your applications!</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/regular-expressions-in-csharp-3-examples?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Did you find this helpful? Please share!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/regular-expressions-in-csharp-3-examples?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/regular-expressions-in-csharp-3-examples?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div></li></ul>]]></content:encoded></item><item><title><![CDATA[Regex Options In C#: A Beginner’s Guide To Powerful Pattern Matching]]></title><description><![CDATA[Regular expressions are incredibly powerful both at matching string patterns and for giving developers headaches. Some days, I&#8217;m not sure what they do a better job of! In C#, when we&#8217;re working with regular expressions we get a handful of methods to use, but we can also configure the regular expressions to behave differently. In this article, we&#8217;ll look at regex options in C# together by walking through some introductory regex methods that we have access to and then seeing these regex options in action.]]></description><link>https://devleader.substack.com/p/regex-options-in-csharp-a-beginners-guide</link><guid isPermaLink="true">https://devleader.substack.com/p/regex-options-in-csharp-a-beginners-guide</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Tue, 09 Apr 2024 12:02:19 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/04/01/regex-options-in-csharp-beginners-guide-to-powerful-pattern-matching/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:50434,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/04/01/regex-options-in-csharp-beginners-guide-to-powerful-pattern-matching/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85cebd38-2e63-40c3-8d0b-5f576e6c706b_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/04/01/regex-options-in-csharp-beginners-guide-to-powerful-pattern-matching/">This article was originally posted on my website</a>!</figcaption></figure></div><p>Regular expressions are incredibly powerful both at matching string patterns and for giving developers headaches. Some days, I&#8217;m not sure what they do a better job of! In C#, when we&#8217;re working with regular expressions we get a handful of methods to use, but we can also configure the regular expressions to behave differently. In this article, we&#8217;ll look at regex options in C# together by walking through some introductory regex methods that we have access to and then seeing these regex options in action.</p><p>And don&#8217;t worry: Not only are there code examples that you can copy and paste, but you can try them out right in your browser thanks to DotNetFiddle.</p><div><hr></div><h2><strong>What is a Regular Expression?</strong></h2><p>Regular expressions, often referred to as regex, are powerful tools used for pattern matching in text. They allow you to define a search pattern that can be used to find, replace, or manipulate specific parts of a string. Regular expressions provide a concise and flexible way to search for and identify specific patterns within text data.</p><p>In software engineering, <a href="https://www.devleader.ca/?p=6912">regular expressions</a> are particularly useful for tasks such as data validation, text parsing, and pattern extraction. They can be used in a wide range of scenarios, including web development, data processing, and text analysis. Regular expressions can save you time and effort by providing a more efficient and reliable approach to handling text manipulation tasks.</p><p>Here are a bunch of practical examples you could consider using a <a href="https://www.devleader.ca/2024/04/02/regular-expressions-in-csharp-3-examples-you-need-to-know/">regular expression</a> for:</p><ol><li><p><strong>Validating Email Addresses</strong>: Say you are developing a web application that requires users to provide valid email addresses during the registration process. With regular expressions, you can quickly validate if an email address provided by the user adheres to the standard format, ensuring its correctness before further processing.</p></li><li><p><strong>Searching and Replacing Text</strong>: Imagine you have a large document and need to replace all occurrences of a particular word or phrase with another. Instead of manually searching through the entire document, you can use regular expressions to perform the substitution task efficiently and accurately.</p></li><li><p><strong>Extracting Data from Text</strong>: Suppose you have a log file containing lines of data, but you are only interested in retrieving specific pieces of information, such as timestamps or error messages. Regular expressions enable you to extract the relevant data by identifying patterns within the log entries, saving you valuable time when analyzing and troubleshooting issues.</p></li></ol><p>These are just a few examples of how regular expressions can be leveraged in your applications. In C#, the .NET framework provides a regex library that offers us the power to match all sorts of strings that we&#8217;re interested in. In the following sections, I&#8217;ll provide code examples for how to work with regular expressions in C#.</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Subscribe and get more helpful articles right to your inbox!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Getting Started with Regular Expressions in C#</strong></h2><p>To begin using regular expressions in C#, you need to understand how to create and work with Regex objects, which are part of the System.Text.RegularExpressions namespace. So to start, let&#8217;s get this namespace included in your C# code. You can do this by adding the following using statement at the top of your C# file:</p><pre><code><code>using System.Text.RegularExpressions;</code></code></pre><p>Once you have included the namespace, you can create a Regex object to represent your regular expression pattern. The Regex class provides various constructors that allow you to specify the pattern and any additional options &#8212; but we&#8217;ll just start with the default C# regex options for now. For example, to create a Regex object that matches the word &#8220;hello&#8221; in a string, you can use the following code:</p><pre><code><code>Regex regex = new Regex("hello");</code></code></pre><h3><strong>Using Regex.Match in C#</strong></h3><p>After creating the Regex object, you can use its methods to perform pattern-matching operations on strings. The most commonly used method is <code>Match</code>, which searches for the first occurrence of the pattern in a given string. Here is a basic example that demonstrates how to use regular expressions for pattern matching in C#:</p><pre><code><code>using System;
using System.Text.RegularExpressions;

string input = "Hello, World!";
Regex regex = new Regex("Hello");
Match match = regex.Match(input);

if (match.Success)
{
    Console.WriteLine($"Pattern found: {match.Value}");
}
else
{
    Console.WriteLine("Pattern not found.");
}</code></code></pre><p>In this example, we create a Regex object to match the word &#8220;Hello&#8221; and then use the <code>Match</code> method to search for a match in the input string &#8220;Hello, World!&#8221;. The <code>Match</code> method returns a <code>Match</code> object, which contains information about the first occurrence of the pattern. We can use the <code>Success</code> property to check if a match was found and the <code>Value</code> property to retrieve the matched string.</p><p>You can check out <a href="https://dotnetfiddle.net/MnMJzL">this dotnetfiddle to run this C# regex example</a> right in your browser!</p><h3><strong>Using Regex.Matches in C#</strong></h3><p>What happens if we want to match more than one part of the input string though? That&#8217;s where the <code>Matches</code> method comes into play, which will also give us a <code>MatchCollection</code> return type to work with. Let&#8217;s see it in action:</p><pre><code><code>using System;
using System.Text.RegularExpressions;

string input = "Hello, World!";
Regex regex = new Regex("Hello");
MatchCollection matches = regex.Matches(input);

if (matches.Count &gt; 0)
{
&#9;Console.WriteLine("Pattern(s) found:");
&#9;foreach (Match match in matches)
&#9;{
&#9;&#9;Console.WriteLine($"t {match.Value}");
&#9;}
}
else
{
    Console.WriteLine("Pattern not found.");
}</code></code></pre><p>You can see in the example above that if we can enumerate the collection of matches instead of just dealing with a single. And if you want to try it for yourself and experiment, you can <a href="https://dotnetfiddle.net/jXDGrz">use this dotnetfiddle to run the example of Regex.Matches in C#</a>.</p><div><hr></div><h2><strong>The Various Regex Options in C#</strong></h2><p>When working with regular expressions in C#, there are several options that can be used to modify the behavior of the pattern matching. These options are defined by the <code>RegexOptions</code> enumeration in C#. <a href="https://www.devleader.ca/2023/11/15/enums-in-csharp-a-simple-guide-to-expressive-code/">Because this is a flag enum</a>, we can combine the different enum values to mix and match these C# regex options to get the desired behavior we want.</p><p>Let&#8217;s take a closer look at some commonly used options and understand their use in different scenarios so that you can make informed decisions and leverage regex in C# more effectively!</p><h3><strong>RegexOptions.Compiled</strong></h3><p>This option improves performance by precompiling the regular expression pattern into an assembly. It&#8217;s especially useful when the same regular expression pattern is used repeatedly. By compiling the pattern once, subsequent matches can be performed more efficiently. To use this option, simply add RegexOptions.Compiled as a parameter when creating your Regex object.</p><p>Let&#8217;s consider an example where we could <a href="https://www.devleader.ca/2023/03/17/shocking-results-from-collection-and-iterator-benchmarks/">benchmark the results</a> of using this option or not using BenchmarkDotNet:</p><pre><code><code>using System;
using System.Text.RegularExpressions;

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

[MemoryDiagnoser]
[ShortRunJob]
public sealed class EmailValidationBenchmark
{
    // NOTE: you could (should) extend this example
    // to try out all sorts of emails and collections
    // of emails!
    private const string TestEmail = "example@example.com";
    private const string Pattern = @"^[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$";

    private static readonly Regex EmailRegexCompiled = new Regex(
        Pattern,
        RegexOptions.Compiled
    );

    private static readonly Regex EmailRegexNonCompiled = new Regex(
        Pattern
    );

    [Benchmark]
    public bool ValidateEmailWithCompiledOption()
    {
        return EmailRegexCompiled.IsMatch(TestEmail);
    }

    [Benchmark(Baseline = true)]
    public bool ValidateEmailWithoutCompiledOption()
    {
        return EmailRegexNonCompiled.IsMatch(TestEmail);
    }
}

class Program
{
    static void Main(string[] args)
    {
        var summary = BenchmarkRunner.Run&lt;EmailValidationBenchmark&gt;();
    }
}
</code></code></pre><p>Try this example out &#8212; or, better yet, try setting up a benchmark like this for your own regex and seeing if compiled makes a difference for you! Do you notice if there&#8217;s a difference in memory usage or just runtime?</p><p>Next question for you to try in your benchmarks: Do you want to be creating a new regex with the compiled flag on every time you use it, or is there performance overhead for doing that? Measure it and see if there&#8217;s a benefit to doing the compilation of the regex ONCE and storing that regex in an instance variable for re-use!</p><h3><strong>RegexOptions.IgnoreCase</strong></h3><p>This option enables case-insensitive matching, allowing the regular expression pattern to match both uppercase and lowercase characters. This is important to note, because if you weren&#8217;t already aware &#8212; yes, regex is going to be case-sensitive. Hopefully you haven&#8217;t had too many headaches over this yet!</p><p>By using this option, when searching for the word &#8220;apple&#8221; using the pattern &#8220;apple&#8221;, enabling RegexOptions.IgnoreCase would match &#8220;apple&#8221;, &#8220;Apple&#8221;, and &#8220;APPLE&#8221;. To use this option, include RegexOptions.IgnoreCase as a parameter when creating your Regex object. We can see this in action in the following example:</p><pre><code><code>using System;
using System.Text.RegularExpressions;


string input1 = "I love eating apples!";
string input2 = "APPLES are great for health.";
string input3 = "Have you seen my Apple?";

Console.WriteLine($"Input 1 contains 'apple': {ContainsApple(input1)}");
Console.WriteLine($"Input 2 contains 'apple': {ContainsApple(input2)}");
Console.WriteLine($"Input 3 contains 'apple': {ContainsApple(input3)}");

static bool ContainsApple(string input)
{
    // hmmm... should we have pulled this out
    // and used the compiled flag?
    Regex appleRegex = new Regex(
        "apple",
        RegexOptions.IgnoreCase);
    return appleRegex.IsMatch(input);
}</code></code></pre><h3><strong>RegexOptions.Multiline</strong></h3><p>This option changes the behavior of the ^ and $ anchors when used in the pattern. By default, ^ matches the start of the input string and $ matches the end of the input string. However, with RegexOptions.Multiline enabled, ^ also matches the start of each line within the input string and $ matches the end of each line. This option is particularly useful when dealing with multi-line input.</p><p>To use this option, include RegexOptions.Multiline as a parameter when creating your Regex object, which you can see in this example below! We&#8217;ll use this code to look for lines that start with a comment character denoted by the hashtag/pound symbol, #:</p><pre><code><code>using System;
using System.Text.RegularExpressions;

string multiLineText = 
    """
    This is some sample text.
    # This is a comment.
    And here's another line.
    # Another comment.
    """;

foreach (var comment in FindComments(multiLineText))
{
    Console.WriteLine(comment);
}

static string[] FindComments(string input)
{
&#9;// Use RegexOptions.Multiline to treat ^ as the start of each line.
&#9;Regex commentRegex = new Regex("^#.*$", RegexOptions.Multiline);

&#9;var matches = commentRegex.Matches(input);
&#9;string[] comments = new string[matches.Count];
&#9;for (int i = 0; i &lt; matches.Count; i++)
&#9;{
&#9;&#9;comments[i] = matches[i].Value;
&#9;}

&#9;return comments;
}</code></code></pre><p>If you want to play around with <a href="https://dotnetfiddle.net/e4X9ZP">this example right in your browser, check out this DotNetFiddle</a>.</p><div><hr></div><h2><strong>Wrapping Up Regex Options in C#</strong></h2><p>In this article, I gave you a brief rundown of some simple methods that we have access to in C# for working with regular expressions. But beyond that, we got to see a handful of different regex options in C# that we have access to that can change the behavior of our matching!</p><p>Try out the code examples! Play around with them in DotNetFiddle! Consider benchmarking your code with BenchmarkDotNet if you&#8217;re looking to tune the performance of your pattern matching using regular expressions in C#.</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/regex-options-in-csharp-a-beginners-guide?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">If you thought this was helpful, share it with others!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/regex-options-in-csharp-a-beginners-guide?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/regex-options-in-csharp-a-beginners-guide?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p></li></ul><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div>]]></content:encoded></item><item><title><![CDATA[Collection Initializer Performance in C# – How To Get An 87% Boost!]]></title><description><![CDATA[After seeing some posts on LinkedIn discussing collection initializers, I became curious. There was a claim that using collection expressions would have better performance than collection initializers. As a result, I set out to measure collection initializer performance in C# using BenchmarkDotNet]]></description><link>https://devleader.substack.com/p/csharp-collection-initializer-performance</link><guid isPermaLink="true">https://devleader.substack.com/p/csharp-collection-initializer-performance</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Mon, 08 Apr 2024 12:02:46 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/31/collection-initializer-performance-in-c-double-your-performance-with-what/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:84410,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/31/collection-initializer-performance-in-c-double-your-performance-with-what/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff95aad91-b0da-432d-b8f3-0af2f99b668a_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/31/collection-initializer-performance-in-c-double-your-performance-with-what/">This article was originally posted on my website</a>!</figcaption></figure></div><p>After seeing some posts on LinkedIn discussing collection initializers, I became curious. There was a claim that using collection expressions would have better performance than collection initializers. As a result, I set out to <a href="https://www.devleader.ca/2024/03/31/collection-initializer-performance-in-c-double-your-performance-with-what/">measure collection initializer performance in C# using BenchmarkDotNet</a>. And yes, while these might be micro-optimizations for many people, I thought it would be cool to explore.</p><p>Besides, maybe there&#8217;s someone out there with something like this on their hot-path that needs to squeeze a bit more out of their application &#128578;</p><div><hr></div><h2><strong>What Are Collection Initializers and Collection Expressions in C#?</strong></h2><p>In one of my most recent articles, I explain <a href="https://www.devleader.ca/2024/03/29/collection-initializers-and-collection-expressions-in-csharp-code-examples/">the basics of collection initializers with some simple code examples</a>. Simple put, instead of manually writing code like the following to initialize a collection:</p><pre><code><code>List&lt;string&gt; devLeaderCoolList = new List&lt;string&gt;();
devLeaderCoolList.Add("Hello");
devLeaderCoolList.Add(", ");
devLeaderCoolList.Add("World!");</code></code></pre><p>&#8230; we can instead reduce it to something more succinct like the following:</p><pre><code><code>List&lt;string&gt; devLeaderCoolList = [ "Hello", ", ", "World!" ];</code></code></pre><p>Pretty neat, right? And this collection expression syntax is even more lightweight than we&#8217;ve had access to in recent times.</p><p>But syntax and readability aside (Not to minimize the benefits of readability of code, but I&#8217;m trying not to put you to sleep), what about the performance?! I bet you didn&#8217;t even consider that with all of the different collection initializer syntax that we have that we&#8217;d see a performance difference!</p><p>Well, Dave Callan got me thinking about that when he posted this on LinkedIn:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp" width="868" height="574" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:574,&quot;width&quot;:868,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Dave Callan - Collection Initializer Collection Expression Benchmarks&quot;,&quot;title&quot;:&quot;Dave Callan - Collection Initializer Collection Expression Benchmarks - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Dave Callan - Collection Initializer Collection Expression Benchmarks" title="Dave Callan - Collection Initializer Collection Expression Benchmarks - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fa856cc-42b4-41fb-97f1-e702326a7c5a_868x574.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p><a href="https://www.linkedin.com/feed/update/urn:li:activity:7178702418329624578?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7178702418329624578%2C7178737535345471492%29&amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287178737535345471492%2Curn%3Ali%3Aactivity%3A7178702418329624578%29">This image was originally posted by Dave Callan on LinkedIn</a>, and that has inspired this entire article. So let&#8217;s jump into some benchmarks!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Remember to subscribe for future articles!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Exploring List Collection Initializer Performance in C#</strong></h2><p>This section will detail the benchmarks for initializing lists in C# in various ways. I&#8217;ll provide coverage on different <a href="https://www.devleader.ca/2024/03/29/collection-initializers-and-collection-expressions-in-csharp-code-examples/">collection initializers, the newer collection expression</a> syntax, and even compare it to doing it manually! Surely, adding everything by hand would be slower than setting ourselves up for success by doing it all with a collection initializer &#8212; but we should cover our bases.</p><p>I will not be covering the spread operator in these benchmarks because I&#8217;d like to focus on that more for collection combination benchmarks. Admittedly, yes, it is still creating a collection&#8230; but I feel like the use case is different and I&#8217;d like to split it up.</p><p>I&#8217;ll be using BenchmarkDotNet for all of these benchmarks, so if you&#8217;re not <a href="https://www.youtube.com/watch?v=Wa3sdKGp3wE">familiar with using BenchmarkDotNet you can check out this video</a> and see how to use it for yourself:</p><div id="youtube2-Wa3sdKGp3wE" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;Wa3sdKGp3wE&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/Wa3sdKGp3wE?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><h3><strong>The List Benchmark Code</strong></h3><p>With the BenchmarkDotNet NuGet installed, here&#8217;s what I am using at the entry point to kick things off (for all benchmark examples in this article):</p><pre><code><code>using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

using System.Reflection;

BenchmarkRunner.Run(
    Assembly.GetExecutingAssembly(),
    args: args);</code></code></pre><p>It&#8217;s not very exciting &#8212; but I wanted to show you there&#8217;s nothing fancy going on here. Just running all of the benchmarks we have access to. And here is the list benchmark code:</p><pre><code><code>[MemoryDiagnoser]
[MediumRunJob]
public class ListBenchmarks
{
    private static readonly string[] _dataAsArray = new string[]
    {
        "Apple",
        "Banana",
        "Orange",
    };

    private static IEnumerable&lt;string&gt; GetDataAsIterator()
    {
        yield return "Apple";
        yield return "Banana";
        yield return "Orange";
    }

    [Benchmark(Baseline = true)]
    public List&lt;string&gt; ClassicCollectionInitializer_NoCapacity()
    {
        return new List&lt;string&gt;()
        {
            "Apple",
            "Banana",
            "Orange",
        };
    }

    [Benchmark]
    public List&lt;string&gt; ClassicCollectionInitializer_SetCapacity()
    {
        return new List&lt;string&gt;(3)
        {
            "Apple",
            "Banana",
            "Orange",
        };
    }

    [Benchmark]
    public List&lt;string&gt; CollectionExpression()
    {
        return
        [
            "Apple",
            "Banana",
            "Orange",
        ];
    }

    [Benchmark]
    public List&lt;string&gt; CopyConstructor_Array()
    {
        return new List&lt;string&gt;(_dataAsArray);
    }

    [Benchmark]
    public List&lt;string&gt; CopyConstructor_Iterator()
    {
        return new List&lt;string&gt;(GetDataAsIterator());
    }

    [Benchmark]
    public List&lt;string&gt; ManuallyAdd_NoCapacitySet()
    {
        List&lt;string&gt; list = [];
        list.Add("Apple");
        list.Add("Banana");
        list.Add("Orange");
        return list;
    }

    [Benchmark]
    public List&lt;string&gt; ManuallyAdd_CapacitySet()
    {
        List&lt;string&gt; list = new(3);
        list.Add("Apple");
        list.Add("Banana");
        list.Add("Orange");
        return list;
    }
}</code></code></pre><p>Note in the above code example the baseline we will be comparing against is what I consider the traditional collection initializer:</p><pre><code><code>return new List&lt;string&gt;()
{
    "Apple",
    "Banana",
    "Orange",
};</code></code></pre><h3><strong>The List Benchmark Results</strong></h3><p>And of course, I wouldn&#8217;t make you go compile and run these yourself, so let&#8217;s look at the results below:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp" width="1024" height="346" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:346,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;C# Collection Initializer and Collection Expression Benchmarks for List&quot;,&quot;title&quot;:&quot;C# Collection Initializer and Collection Expression Benchmarks for List - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="C# Collection Initializer and Collection Expression Benchmarks for List" title="C# Collection Initializer and Collection Expression Benchmarks for List - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5fdab82-95fc-41b3-ba0e-032c2d627146_1024x346.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>Let&#8217;s go through the results from worst to best based on the Ratio column (Higher is worse):</p><ul><li><p>3.31X &#8211; Using a copy constructor where we pass in an iterator is the worst performing. This is likely due to the overhead of creating an iterator, especially for such a small and simple overall operation AND because there&#8217;s no known capacity when using an iterator.</p></li><li><p>1.76X &#8211; Using a copy constructor even with an array isn&#8217;t great. If you know what you need to put into the collection, you&#8217;re better off using a normal classic collection initializer. An argument for both the copy constructors though is that if this isn&#8217;t on the hot path it might be more maintainable in your code to copy a collection vs instantiate it with duplicated values manually.</p></li><li><p>1.10X &#8211; Manually adding things to a collection without setting a capacity is only a little bit slower than using a collection initializer with no capacity! 10% slower based on these benchmarks.</p></li><li><p>1.0X &#8211; The baseline here is a classic collection initializer with no capacity set</p></li></ul><p>Here is where we start to see some speed up!</p><ul><li><p>0.64X &#8211; Using a collection expression was 64% of the time! That&#8217;s a pretty dramatic improvement for what just looks like a syntax change, and that&#8217;s very much inline with what Dave Callan&#8217;s screenshot shows.</p></li><li><p>0.61X &#8211; Manually adding things to a list that has an initial capacity is actually FASTER than these other collection initializers and collection expression that we&#8217;ve seen so far!</p></li><li><p>0.53X &#8211; Using a classic collection initializer but providing the capacity is almost HALF the time!</p></li></ul><p>One of the common themes here is that providing a capacity is a BIG performance gain. We realized an ~87% gain over our baseline simply by providing it a capacity. Side note: why couldn&#8217;t the compiler do some kind of optimization here if we know the collection size in the braces?!</p><div><hr></div><h2><strong>Exploring Dictionary Collection Initializer Performance in C#</strong></h2><p>Dictionaries don&#8217;t yet have a fancy collection expression that uses square brackets and removes even more bloat, but we do have several variations of collection initializers to use. These benchmarks will be very similar, also using BenchmarkDotNet, and they also use the same entry point program &#8212; so I won&#8217;t repeat it here.</p><p>I know dictionaries can have two types to work with, and I wanted to keep this similar to the list example &#8212; not because they are similar implementations of collections, but because I didn&#8217;t want to just pollute this article with more variations of things for no reason. I decided to go with a <code>Dictionary&lt;string, string&gt;</code> where the keys are what we already looked at, and the values are just some short strings to work with that are unique.</p><h3><strong>The Dictionary Benchmark Code</strong></h3><p>Here&#8217;s the code for the dictionary benchmarks:</p><pre><code><code>[MemoryDiagnoser]
[MediumRunJob]
public class DictionaryBenchmarks
{
    private static readonly Dictionary&lt;string, string&gt; _sourceData = new()
    {
        ["Apple"] = "The first value",
        ["Banana"] = "The next value",
        ["Orange"] = "The last value",
    };

    private static IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; GetDataAsIterator()
    {
        foreach (var item in _sourceData)
        {
            yield return item;
        }
    }

    [Benchmark(Baseline = true)]
    public Dictionary&lt;string, string&gt; CollectionInitializer_BracesWithoutCapacity()
    {
        return new Dictionary&lt;string, string&gt;()
        {
            { "Apple", "The first value" },
            { "Banana", "The next value" },
            { "Orange",  "The last value" },
        };
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; CollectionInitializer_BracesWithCapacity()
    {
        return new Dictionary&lt;string, string&gt;(3)
        {
            { "Apple", "The first value" },
            { "Banana", "The next value" },
            { "Orange",  "The last value" },
        };
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; CollectionInitializer_BracketsWithoutCapacity()
    {
        return new Dictionary&lt;string, string&gt;()
        {
            ["Apple"] = "The first value",
            ["Banana"] = "The next value",
            ["Orange"] = "The last value",
        };
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; CollectionInitializer_BracketsWithCapacity()
    {
        return new Dictionary&lt;string, string&gt;(3)
        {
            ["Apple"] = "The first value",
            ["Banana"] = "The next value",
            ["Orange"] = "The last value",
        };
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; CopyConstructor_Dictionary()
    {
        return new Dictionary&lt;string, string&gt;(_sourceData);
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; CopyConstructor_Iterator()
    {
        return new Dictionary&lt;string, string&gt;(GetDataAsIterator());
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; ManuallyAdd_NoCapacitySet()
    {
        Dictionary&lt;string, string&gt; dict = [];
        dict.Add("Apple", "The first value");
        dict.Add("Banana", "The next value");
        dict.Add("Orange", "The last value");
        return dict;
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; ManuallyAdd_CapacitySet()
    {
        Dictionary&lt;string, string&gt; dict = new(3);
        dict.Add("Apple", "The first value");
        dict.Add("Banana", "The next value");
        dict.Add("Orange", "The last value");
        return dict;
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; ManuallyAssign_NoCapacitySet()
    {
        Dictionary&lt;string, string&gt; dict = [];
        dict["Apple"] = "The first value";
        dict["Banana"] = "The next value";
        dict["Orange"] = "The last value";
        return dict;
    }

    [Benchmark]
    public Dictionary&lt;string, string&gt; ManuallyAssign_CapacitySet()
    {
        Dictionary&lt;string, string&gt; dict = new(3);
        dict["Apple"] = "The first value";
        dict["Banana"] = "The next value";
        dict["Orange"] = "The last value";
        return dict;
    }
}</code></code></pre><p>You&#8217;ll notice two themes creeping up:</p><ul><li><p>We have two different flavors of collection initializers: square brackets and curly braces</p></li><li><p>We can manually instantiate a dictionary by adding or directly assigning (which are NOT the exact same behavior)</p></li></ul><p>Otherwise, we still have capacity considerations just like the list benchmarks!</p><h3><strong>The Dictionary Benchmark Results</strong></h3><p>The dictionary benchmarks are as follows:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp" width="1024" height="388" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:388,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;C# Collection Initializer and Collection Expression Benchmarks for Dictionary&quot;,&quot;title&quot;:&quot;C# Collection Initializer and Collection Expression Benchmarks for Dictionary - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="C# Collection Initializer and Collection Expression Benchmarks for Dictionary" title="C# Collection Initializer and Collection Expression Benchmarks for Dictionary - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F14cf3e97-c087-452c-8c49-2ae4f2a5e6c5_1024x388.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>Doing the same exercise of highest to lowest ratio:</p><ul><li><p>2.03X &#8211; Copy constructor with iterator strikes again! I suspect for similar reasons &#8212; no count for knowing the capacity and the overhead of creating the iterator relative to the number of items.</p></li><li><p>1.02X &#8211; Manually adding items to the dictionary WITH the capacity set was almost the exact same performance as using the collection initializer! This one to me is very surprising given the known capacity usually speeds things up a great deal.</p></li><li><p>1.0X &#8211; Our classic collection initializer using curly braces and not setting the capacity is our baseline</p></li></ul><p>Everything beyond here is technically faster according to our benchmarks:</p><ul><li><p>0.96X &#8211; In the case where we provide a capacity, we&#8217;re a little bit faster than the baseline using the same syntax.</p></li><li><p>0.95X &#8211; Manually assigning items without a known capacity is even faster, and about 5% faster than the baseline. I still wouldn&#8217;t be making much of a fuss here.</p></li><li><p>0.94X &#8211; Classic collection initializer but using square brackets and not setting a capacity is ~6% faster than the baseline.</p></li><li><p>0.90X &#8211; Manually assigning items when the capacity is known is ~11% faster than the baseline, so we&#8217;re starting to pick up steam a little bit here!</p></li><li><p>0.87X &#8211; Classic collection initializer but using square brackets WITH a known capacity is ~15% faster than the baseline</p></li><li><p>0.86X &#8211; Manually adding things to the dictionary but NOT setting a capacity is ~16% faster&#8230;</p></li></ul><p>Okay, wait a second. Now we&#8217;re going to see that doing a dictionary copy is the FASTEST with a ~35% speed boost? I&#8217;m not sure how we&#8217;ve started to see known capacities not helping and copy constructors being fastest.</p><p>Even I&#8217;m skeptical now. So I wanted to rerun the benchmarks and I wanted to add a variant of each of the manual benchmarks that uses <code>new()</code> instead of an empty <a href="https://www.devleader.ca/2024/03/29/collection-initializers-and-collection-expressions-in-csharp-code-examples/">collection expression,</a> <code>[]</code>.</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp" width="1024" height="386" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:386,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;C# Collection Initializer and Collection Expression Benchmarks for Dictionary V2&quot;,&quot;title&quot;:&quot;C# Collection Initializer and Collection Expression Benchmarks for Dictionary V2 - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="C# Collection Initializer and Collection Expression Benchmarks for Dictionary V2" title="C# Collection Initializer and Collection Expression Benchmarks for Dictionary V2 - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe27e0d7d-c2e1-499f-85d5-c26e4ee16671_1024x386.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>In this run of the benchmarks, things are much closer across the board. I don&#8217;t think that discredits the previous benchmarks, because truly many of them were also relatively close with the iterator copy constructor remaining the huge outlier. But the other huge outlier that remains is the copy constructor using another dictionary!</p><p>My takeaway is this:</p><ul><li><p>For the marginal boost in performance, I think you should opt for readability here &#8212; especially when the collection sizes are this small.</p></li><li><p>If you know that you&#8217;re trying to set up a dictionary to be just like another, apparently copying it is much faster. So if you have this kind of thing on a hot path, here&#8217;s a fun little micro-optimization.</p></li></ul><div><hr></div><h2><strong>Are These Realistic Benchmarks?</strong></h2><p>I&#8217;ve written hundreds of articles, made hundreds of YouTube videos, and more posts across social media platforms than I could ever count. There will be people who want to pick these benchmarks apart, and unfortunately, their goal will seem like they&#8217;re just trying to discredit what&#8217;s being presented.</p><p>However, I *DO* think it&#8217;s important to discuss the context of the benchmarks and look at what&#8217;s being considered in these scenarios:</p><ul><li><p>In the grand scheme of things, I&#8217;d suspect it&#8217;s unlikely that you&#8217;re going to get huge performance gains from focusing on these collection initializers. There&#8217;s probably bigger fish to fry in your code. But we do see there are some gains to be had!</p></li><li><p>When using an iterator example with a very small set of data or other very fast operations, the overhead of the iterator itself may dwarf some of the other actions taking place</p></li><li><p>The use case for these different ways of creating lists varies. For some, we&#8217;re defining the full collection whereas for others we&#8217;re using values from another collection. The use case isn&#8217;t necessarily apples to apples for a comparison.</p></li><li><p>There seem to be big gains from knowing the capacity up front, which is likely helping reduce collection resizing behind the scenes. How might this change if we were dealing with larger data sets?</p></li></ul><p>The goal of presenting these benchmarks is not to tell you that you must do things a certain way &#8212; it&#8217;s simply to show you some interesting information. Even if you are hyper-focused on performance, you should benchmark and profile your own code! Don&#8217;t rely on my results here. Let these serve as a starting point that you might be able to tune things on your hot path that you didn&#8217;t realize.</p><p>What other considerations can you think of? Feel free to share in the comments &#8212; but be conversational, please.</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/csharp-collection-initializer-performance?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">If you thought this was cool, share it with your dotnet friends!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/csharp-collection-initializer-performance?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/csharp-collection-initializer-performance?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h2><strong>Wrapping Up Collection Initializer Performance in C#</strong></h2><p>Overall, I consider most of what we see in this article on collection initializer performance in C# to be micro-optimizations &#8212; more than likely. I wouldn&#8217;t lose sleep over using one way over another, as long as you&#8217;re optimizing for readability and your profiling results don&#8217;t show you spending most of your time doing collection initialization. I hope that you got to have fun exploring this with me and see that if you&#8217;re ever curious you can go set up some simple benchmarks to experiment!</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p></li></ul>]]></content:encoded></item><item><title><![CDATA[Collection Initializers And Collection Expressions In C# – Simplified Code Examples]]></title><description><![CDATA[I was recently inspired by some interesting performance characteristics for collection initializers and collection expressions in C#, and I wanted to get an introductory article put together. This article will be part of a small series where I first introduce you to the syntax we have to work with for both collection expressions and collection initializers in C#. We&#8217;ll see the difference in style and readability &#8212; which the dotnet team has been progressing to make the language feel less heavy-handed while still maintaining expressiveness.]]></description><link>https://devleader.substack.com/p/csharp-collection-initializers-and-expressions</link><guid isPermaLink="true">https://devleader.substack.com/p/csharp-collection-initializers-and-expressions</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Sun, 07 Apr 2024 12:01:06 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:82098,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db680b5-113f-4ea3-acef-2f7d6feb1957_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/29/collection-initializers-and-collection-expressions-in-csharp-code-examples/">This article was originally posted on my website</a>!</figcaption></figure></div><p>I was recently inspired by some interesting performance characteristics for <a href="https://www.devleader.ca/2024/03/29/collection-initializers-and-collection-expressions-in-csharp-code-examples/">collection initializers and collection expressions in C#</a>, and I wanted to get an introductory article put together. This article will be part of a small series where I first introduce you to the syntax we have to work with for both collection expressions and collection initializers in C#. We&#8217;ll see the difference in style and readability &#8212; which the dotnet team has been progressing to make the language feel less heavy-handed while still maintaining expressiveness.</p><p>Once you&#8217;ve got a feel for how collection initializers and collection expressions in C# work, you&#8217;ll be geared up to check out some of the performance benchmarks on them. There&#8217;s no point in hyper-optimizing for this stuff unless you understand the basics!</p><div><hr></div><h2><strong>Using List&lt;T&gt; with Collection Initializers in C#</strong></h2><p>Collection initializers in C# allow for a concise and readable way to populate collections like <code>List&lt;T&gt;</code> upon instantiation. This feature simplifies code by enabling the initialization of a collection with a set of predefined elements without the need for multiple calls to the <code>Add</code> method.</p><p>These next subsections will show examples of collection initializers with the <code>List&lt;T&gt;</code> type. Keep in mind that the entire point of these initializers is to define collections with elements in them to start with, which would save us from doing something like the following:</p><pre><code><code>List&lt;string&gt; devLeaderCoolList = new List&lt;string&gt;();
devLeaderCoolList.Add("Hello");
devLeaderCoolList.Add(", ");
devLeaderCoolList.Add("World!");</code></code></pre><p>So with this as a starting point, consider that the upcoming examples make this feel more streamlined and concise.</p><h3><strong>Example 1: Initializing a List of Integers</strong></h3><pre><code><code>List&lt;int&gt; primeNumbers = new List&lt;int&gt; { 2, 3, 5, 7, 11, 13, 17 };</code></code></pre><p>This example demonstrates initializing a <code>List&lt;int&gt;</code> with a collection of prime numbers. The numbers are enclosed in braces <code>{}</code> and separated by commas, directly following the instantiation of the list.</p><p>We can also use a slightly more short-hand syntax to drop the entire duplicated type definition from the right side of the equal sign:</p><pre><code><code>List&lt;int&gt; primeNumbers = new() { 2, 3, 5, 7, 11, 13, 17 };</code></code></pre><h3><strong>Example 2: Combining Object and Collection Initializers</strong></h3><pre><code><code>public class Student
{
    public string Name { get; set; }
    public int Age { get; set; }
}

List&lt;Student&gt; students = new List&lt;Student&gt;
{
    new Student { Name = "Alice", Age = 22 },
    new Student { Name = "Bob", Age = 24 }
};</code></code></pre><p>Here, we combine object and collection initializers to create a <code>List&lt;Student&gt;</code> where each <code>Student</code> object is initialized with <code>Name</code> and <code>Age</code> properties. This approach streamlines the process of filling a collection with fully initialized objects. The important thing to pay attention to here is that the object initializer syntax is very much like the collection initializer syntax, but we are indeed doing two things:</p><ol><li><p>Assigning values to properties of new objects</p></li><li><p>Assigning the collection elements upon collection creation</p></li></ol><h3><strong>Example 3: Using Complex Expressions</strong></h3><pre><code><code>List&lt;double&gt; areas = new List&lt;double&gt;
{
    Math.PI * Math.Pow(3, 2),
    Math.PI * Math.Pow(5, 2)
};</code></code></pre><p>This example initializes a <code>List&lt;double&gt;</code> with areas of circles (using <code>&#960;r&#178;</code>), where <code>r</code> is the radius. It illustrates that expressions, including method calls, can be used within collection initializers &#8212; that is, there is no restriction on constants or pre-evaluated values.</p><h3><strong>Example 4: Nested Collection Initializers</strong></h3><pre><code><code>public class Classroom
{
    public List&lt;Student&gt; Students { get; set; }
}

List&lt;Classroom&gt; classrooms = new List&lt;Classroom&gt;
{
    new Classroom
    {
        Students = new List&lt;Student&gt;
        {
            new Student { Name = "Alice", Age = 22 }
        }
    },
    new Classroom
    {
        Students = new List&lt;Student&gt;
        {
            new Student { Name = "Bob", Age = 24 }
        }
    }
};</code></code></pre><p>This example shows how to use nested collection initializers to initialize a list of <code>Classroom</code> objects, each containing a list of <code>Student</code> objects. Very much like Example 2 that we looked at already, but this takes things up one more notch showing multiple collection initializers and object initialization as well.</p><h3><strong>Example 5: Simple List Initialization with Collection Expressions</strong></h3><p><a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions">In C# 11 we start to get some new fancier syntax for collection expressions</a>. This was a step forward in reducing the verbosity of collection declarations using more shorthand similar to other languages. Microsoft says in their documentation:</p><blockquote><p><em>You can use a&nbsp;collection expression&nbsp;to create common collection values. A&nbsp;collection expression&nbsp;is a terse syntax that, when evaluated, can be assigned to many different collection types. A collection expression contains a sequence of elements between&nbsp;</em><code>[</code>&nbsp;and&nbsp;<code>]</code>&nbsp;brackets.</p><p><em><a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions">Microsoft</a></em></p></blockquote><p>Let&#8217;s check out an example:</p><pre><code><code>List&lt;int&gt; evenNumbers = [2, 4, 6, 8, 10];</code></code></pre><p>This example demonstrates the straightforward initialization of a <code>List&lt;int&gt;</code> using the new collection expressions syntax, making the code more concise and readable.</p><h3><strong>Example 6: Combining Collections with Spread Operator</strong></h3><p>And there are even more goodies in <a href="https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#collection-expressions">C# 12 &#8212; we get the spread operator for collection initialization</a>:</p><pre><code><code>List&lt;int&gt; firstBatch = [1, 2, 3];
List&lt;int&gt; combinedList = [0, ..firstBatch, 4];</code></code></pre><p>Here, the spread operator <code>..</code> is used to include elements from an existing collection (<code>firstBatch</code>) into a new list, showcasing the flexibility of the new syntax in combining collections seamlessly.</p><div><hr></div><h2><strong>Where Are We Headed With These?</strong></h2><p>As you read through the various code examples, you can decide for yourself which ones offer you the readability that you prefer. There&#8217;s not necessarily a right or wrong answer here, but with variety and choice, we are likely going to need to make decisions within our teams about how to stay consistent. Try to strike a balance between minimizing redundancy without hiding too much type information!</p><p>But what&#8217;s next? Do we care THAT much about readability?</p><p>I mean, I do. Honestly, I think it&#8217;s incredibly important to prioritize readability in code. But if you&#8217;re curious like me, you might see a post like this from <a href="https://www.linkedin.com/in/davidcallan/">Dave Callan</a> on the interwebs and get very curious:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp" width="868" height="574" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:574,&quot;width&quot;:868,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Dave Callan - Collection Initializer Collection Expression Benchmarks&quot;,&quot;title&quot;:&quot;Dave Callan - Collection Initializer Collection Expression Benchmarks - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Dave Callan - Collection Initializer Collection Expression Benchmarks" title="Dave Callan - Collection Initializer Collection Expression Benchmarks - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcd1f4fcf-df9a-4fac-bcae-e6aec4cd676c_868x574.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a><figcaption class="image-caption"><a href="https://www.linkedin.com/feed/update/urn:li:activity:7178702418329624578">This was originally posted by Dave Callan on LinkedIn</a></figcaption></figure></div><p>And since this is what sparked my interest and caused me to write this article as a primer, you&#8217;ll perhaps be interested in the performance characteristics that I investigated!</p><div><hr></div><h2><strong>Wrapping Up C# Collection Initializers and Collection Expressions</strong></h2><p>Now that you&#8217;ve seen various examples of the syntax that we have access to, you can make your own informed decisions about which are most readable to you. I think it&#8217;s always important to spend some time looking at alternatives so that you can understand different perspectives, even if it seems like it might be minor. Odds are you&#8217;re going to read and write collection initializers and collection expressions MANY times in your software engineering career &#8212; so why not optimize your choice?</p><p>Speaking of optimizations&#8230; wait until you see <a href="https://www.devleader.ca/2024/03/31/collection-initializer-performance-in-c-double-your-performance-with-what/">the next article on the performance of collection initializers</a>!</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Did you enjoy this article? Subscribe for more!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h3>Want More Dev Leader&nbsp;Content?</h3><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/csharp-collection-initializers-and-expressions?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thank you for reading Dev Leader Articles. This post is public so feel free to share it.</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/csharp-collection-initializers-and-expressions?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/csharp-collection-initializers-and-expressions?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div></li></ul>]]></content:encoded></item><item><title><![CDATA[C# MongoDB Insert Benchmarks – What You Need To Know]]></title><description><![CDATA[In previous articles, I explained how we could use C# and MongoDB to get records inserted. But we started this exploration into MongoDB covering a lot of the basics and I wanted to start looking into more interesting aspects of how we use these things together. As I was putting video content together about all of these topics, one thing that caught my attention was the generic methods vs methods that operated on BsonDocument and I was curious if the performance was any different. So to start, I figured we&#8217;d look at]]></description><link>https://devleader.substack.com/p/csharp-mongodb-insert-benchmarks</link><guid isPermaLink="true">https://devleader.substack.com/p/csharp-mongodb-insert-benchmarks</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Fri, 05 Apr 2024 12:01:02 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/28/c-mongodb-insert-benchmarks-what-you-need-to-know/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:1115977,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/28/c-mongodb-insert-benchmarks-what-you-need-to-know/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73405bd4-9f9c-4bc6-9b9a-714ba1b169e5_1920x1080.png 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/28/c-mongodb-insert-benchmarks-what-you-need-to-know/">This article was originally posted on my website</a>!</figcaption></figure></div><p>In previous articles, I explained how we could <a href="https://www.devleader.ca/2024/03/22/mongodb-in-c-simplified-guide-for-inserting-data/">use C# and MongoDB to get records inserted</a>. But we started this exploration into MongoDB covering a lot of the basics and I wanted to start looking into more interesting aspects of how we use these things together. As I was putting video content together about all of these topics, one thing that caught my attention was the generic methods vs methods that operated on BsonDocument and I was curious if the performance was any different. So to start, I figured we&#8217;d look at <a href="https://www.devleader.ca/2024/03/28/c-mongodb-insert-benchmarks-what-you-need-to-know/">C# MongoDB insert benchmarks</a> and see if any interesting patterns stand out.</p><div><hr></div><h2><strong>Considerations For These C# MongoDB Benchmarks</strong></h2><p>I was chatting with <a href="https://twitter.com/Dave_DotNet">David Callan</a> on Twitter the other day about benchmarks that he often posts on social media. Turns out there was another discussion floating around the Twitter-verse where it was being debated about sync vs async calls to databases. The proposal was that for very fast DB queries, the async variations are indeed slower.</p><p>Of course, this got the gears turning. I have been writing about and creating videos for MongoDB in C# all week and hinting at performance benchmarks coming. This coupled with my conversation with Dave AND the conversation I saw on Twitter made me think that I had to give this more attention. I speculated it might have something to do with Task vs ValueTask, but I didn&#8217;t have a lot of grounds for that.</p><p>However, I originally wanted to look into these benchmarks because I was curious if using BsonDocument compared to a dedicated DTO (whether it was a struct, class, or record variation) would have different performance characteristics.</p><p>That meant that I would want to ensure I covered a matrix across:</p><ul><li><p>Synchronous</p></li><li><p>Asynchronous</p></li><li><p>Asynchronous with ValueTask</p></li><li><p>Struct</p></li><li><p>Class</p></li><li><p>Record Struct</p></li><li><p>Record Class</p></li><li><p>BsonDocument</p></li></ul><p>And with that, I set off to go write some super simple benchmarks! Let&#8217;s check them out.</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Subscribe if you enjoy these articles!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>The C# MongoDB Insert Benchmarking Code</strong></h2><p>As with all <a href="https://www.devleader.ca/2023/09/18/dotnet-benchmarks-how-to-use-benchmarkdotnet-for-beginners/">benchmarking that we do in C#, BenchmarkDotNet is our go-to tool</a>! Make sure you start by getting the BenchmarkDotNet NuGet package installed. We&#8217;ll be using this to ensure we have consistent setup, warmup, runs, and reporting for our MongoDB benchmarks.</p><p>Since we&#8217;re trying to reduce as many possible external factors as we can for these benchmarks, we&#8217;re going to be using Testcontainers to run an instance of MongoDB in a Docker container. Of course, by interacting with anything outside of our code directly there are opportunities for inconsistencies and more room for error to show up in our results. However, this should help minimize things. You&#8217;ll want to get the Testcontainers.MongoDB NuGet package for this as well.</p><p>You can <a href="https://github.com/ncosentino/DevLeader/tree/master/MongoDBExamples/MongoDBExamples.Benchmarks">find all the relevant code on GitHub</a>, but we&#8217;ll start with what our entry point looks like:</p><pre><code><code>using BenchmarkDotNet.Running;

using System.Reflection;

BenchmarkRunner.Run(
    Assembly.GetExecutingAssembly(),
    args: args);</code></code></pre><p>Nice and simple just to kick off the benchmarks. And the benchmarks are the most important part here:</p><pre><code><code>using BenchmarkDotNet.Attributes;

using MongoDB.Bson;
using MongoDB.Driver;

using Testcontainers.MongoDb;

[MemoryDiagnoser]
//[ShortRunJob]
[MediumRunJob]
public class InsertBenchmarks
{
    private MongoDbContainer? _container;
    private MongoClient? _mongoClient;
    private IMongoCollection&lt;BsonDocument&gt;? _collection;
    private IMongoCollection&lt;RecordStructDto&gt;? _collectionRecordStruct;
    private IMongoCollection&lt;RecordClassDto&gt;? _collectionRecordClass;
    private IMongoCollection&lt;StructDto&gt;? _collectionStruct;
    private IMongoCollection&lt;ClassDto&gt;? _collectionClass;

    [GlobalSetup]
    public async Task SetupAsync()
    {
        _container = new MongoDbBuilder()
            .WithImage("mongo:latest")
            .Build();
        await _container.StartAsync();
        
        _mongoClient = new MongoClient(_container.GetConnectionString());
        var database = _mongoClient.GetDatabase("test");
        _collection = database.GetCollection&lt;BsonDocument&gt;("test");
        _collectionRecordStruct = database.GetCollection&lt;RecordStructDto&gt;("test");
        _collectionRecordClass = database.GetCollection&lt;RecordClassDto&gt;("test");
        _collectionStruct = database.GetCollection&lt;StructDto&gt;("test");
        _collectionClass = database.GetCollection&lt;ClassDto&gt;("test");
    }

    [GlobalCleanup]
    public async Task CleanupAsync()
    {
        await _container!.StopAsync();
    }

    [Benchmark]
    public async Task InsertOneAsync_BsonDocument()
    {
        await _collection!.InsertOneAsync(new BsonDocument()
        {
            ["Name"] = "Nick Cosentino",
        });
    }

    [Benchmark]
    public async ValueTask InsertOneAsyncValueTask_BsonDocument()
    {
        await _collection!.InsertOneAsync(new BsonDocument()
        {
            ["Name"] = "Nick Cosentino",
        });
    }

    [Benchmark]
    public void InsertOne_BsonDocument()
    {
        _collection!.InsertOne(new BsonDocument()
        {
            ["Name"] = "Nick Cosentino",
        });
    }

    [Benchmark]
    public async Task InsertOneAsync_RecordStruct()
    {
        await _collectionRecordStruct!.InsertOneAsync(new RecordStructDto("Nick Cosentino"));
    }

    [Benchmark]
    public async ValueTask InsertOneAsyncValueTask_RecordStruct()
    {
        await _collectionRecordStruct!.InsertOneAsync(new RecordStructDto("Nick Cosentino"));
    }

    [Benchmark]
    public void InsertOne_RecordStruct()
    {
        _collectionRecordStruct!.InsertOne(new RecordStructDto("Nick Cosentino"));
    }

    [Benchmark]
    public async Task InsertOneAsync_RecordClass()
    {
        await _collectionRecordClass!.InsertOneAsync(new RecordClassDto("Nick Cosentino"));
    }

    [Benchmark]
    public async ValueTask InsertOneAsyncValueTask_RecordClass()
    {
        await _collectionRecordClass!.InsertOneAsync(new RecordClassDto("Nick Cosentino"));
    }

    [Benchmark]
    public void InsertOne_RecordClass()
    {
        _collectionRecordClass!.InsertOne(new RecordClassDto("Nick Cosentino"));
    }

    [Benchmark]
    public async Task InsertOneAsync_Struct()
    {
        await _collectionStruct!.InsertOneAsync(new StructDto() { Name = "Nick Cosentino" });
    }

    [Benchmark]
    public async ValueTask InsertOneAsyncValueTask_Struct()
    {
        await _collectionStruct!.InsertOneAsync(new StructDto() { Name = "Nick Cosentino" });
    }

    [Benchmark]
    public void InsertOne_Struct()
    {
        _collectionStruct!.InsertOne(new StructDto() { Name = "Nick Cosentino" });
    }

    [Benchmark]
    public async Task InsertOneAsync_Class()
    {
        await _collectionClass!.InsertOneAsync(new ClassDto() { Name = "Nick Cosentino" });
    }

    [Benchmark]
    public async ValueTask InsertOneAsyncValueTask_Class()
    {
        await _collectionClass!.InsertOneAsync(new ClassDto() { Name = "Nick Cosentino" });
    }

    [Benchmark]
    public void InsertOne_Class()
    {
        _collectionClass!.InsertOne(new ClassDto() { Name = "Nick Cosentino" });
    }

    private record struct RecordStructDto(string Name);

    private record class RecordClassDto(string Name);

    private struct StructDto
    {
        public string Name { get; set; }
    }

    private class ClassDto
    {
        public string Name { get; set; }
    }
}</code></code></pre><p>The benchmark code has as much as possible that we&#8217;re not interested in exercising pulled out into the GlobalSetup and GlobalCleanup marked methods.</p><div><hr></div><h2><strong>Results For C# MongoDB Insert Benchmarks</strong></h2><p>Cue the drumroll! It&#8217;s time to look at our MongoDB benchmark results and do a little bit of an analysis:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp" width="1024" height="371" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:371,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;C# MongoDB Insert Benchmarks from BenchmarkDotNet&quot;,&quot;title&quot;:&quot;C# MongoDB Insert Benchmarks from BenchmarkDotNet - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="C# MongoDB Insert Benchmarks from BenchmarkDotNet" title="C# MongoDB Insert Benchmarks from BenchmarkDotNet - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc24874c8-a436-454f-8c1d-22a3c7957a11_1024x371.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>Here are my takeaways from the benchmark data above:</p><ul><li><p>All async variations used ~5KB more than the normal versions of the methods that we had to use.</p></li><li><p>There didn&#8217;t seem to be any difference in allocated memory for async vs async value task BUT Gen0 and Gen1 didn&#8217;t have any value for *some* of the ValueTask benchmarks &#8212; However, not for all of them. It almost looks like ValueTask combined with a struct data type for the insert results in Gen0 and Gen1 with no value, but plain old BsonDocument is an exception to this.</p></li><li><p>The fastest and lowest memory footprint seems to be InsertOne_RecordClass, although the InsertOne_BsonDocument is only a few microseconds off from this.</p></li><li><p>Async versions of the benchmarks seem slower than their normal versions across the board as well</p></li></ul><p>This does seem to be very much aligned with what some of the opening thoughts were from Twitter for async operations! So some hypotheses proved/disproved:</p><ul><li><p>Async *is* overall worse for very fast DB operations</p></li><li><p>ValueTask doesn&#8217;t stand out as a consistent performance optimization in these situations</p></li><li><p>For single items, there&#8217;s no big difference in the memory footprint we&#8217;re seeing between any of these variations of the data types</p></li></ul><p>It&#8217;ll be a good exercise to follow up with benchmarking inserting many items into MongoDB from C#. I think we may start to see some of these variations stand out in different ways once we&#8217;re working with collections of items &#8212; But this is still a hypothesis that needs to be proven!</p><div><hr></div><h2><strong>Wrapping Up C# MongoDB Insert Benchmarks</strong></h2><p>This was a simple investigation of insert benchmarks for MongoDB using C#. Overall, some surprises for me, but I still think there&#8217;s more investigation to be done when we&#8217;re working with multiple records at a time. I truly was a little bit surprised to see async be worse across the board since I figured that perhaps any type of IO would mask the performance impact of async overhead. But this was a fun experiment to try out with more to come!</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/csharp-mongodb-insert-benchmarks?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thank you for reading Dev Leader Articles. This post is public so feel free to share it.</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/csharp-mongodb-insert-benchmarks?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/csharp-mongodb-insert-benchmarks?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h3>Want More Dev Leader&nbsp;Content?</h3><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/csharp-mongodb-insert-benchmarks?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thank you for reading Dev Leader Articles. This post is public so feel free to share it.</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/csharp-mongodb-insert-benchmarks?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/csharp-mongodb-insert-benchmarks?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div></li></ul>]]></content:encoded></item><item><title><![CDATA[C# Testcontainers For MongoDB: How To Easily Run Local Databases]]></title><description><![CDATA[In this article, I&#8217;ll guide you through C# Testcontainers for MongoDB! I love using Testcontainers for local database work when I don&#8217;t want to think about managing the overhead of spinning up and tearing down a database, or managing something in the cloud. MongoDB is no exception here are the C# Testcontainers NuGet package that we have for MongoDB is a dream to work with.]]></description><link>https://devleader.substack.com/p/c-testcontainers-for-mongodb-how</link><guid isPermaLink="true">https://devleader.substack.com/p/c-testcontainers-for-mongodb-how</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Thu, 04 Apr 2024 12:01:28 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/27/c-testcontainers-for-mongodb-how-to-easily-run-local-databases/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:906395,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/27/c-testcontainers-for-mongodb-how-to-easily-run-local-databases/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1b2745e-c34e-45f6-9431-83a112179b30_1920x1080.png 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/27/c-testcontainers-for-mongodb-how-to-easily-run-local-databases/">This article was originally posted on my website</a>!</figcaption></figure></div><p>In this article, I&#8217;ll guide you through <a href="https://www.devleader.ca/2024/03/27/c-testcontainers-for-mongodb-how-to-easily-run-local-databases/">C# Testcontainers for MongoDB</a>! I love using Testcontainers for local database work when I don&#8217;t want to think about managing the overhead of spinning up and tearing down a database, or managing something in the cloud. MongoDB is no exception here are the C# Testcontainers NuGet package that we have for MongoDB is a dream to work with.</p><p>In this article, I&#8217;ll introduce you to the basics of Testcontainers. From there, I&#8217;ll demonstrate how simple it is to interact with your newly created database via the C# MongoDB.Driver NuGet package &#8212; almost like you wouldn&#8217;t even know there was a container spun up! Let&#8217;s dive into it.</p><div><hr></div><h2><strong>Overview of C# Testcontainers</strong></h2><p>Testcontainers is an awesome NuGet package that can greatly enhance your testing and local development workflow when building .NET applications. It provides a simple and effective way to manage Docker containers, allowing you to spin up lightweight and isolated instances and have them tear down like nothing ever happened!</p><p>That means with Testcontainers, you no longer have to worry about setting up and tearing down test databases or dealing with complex configuration files. It handles all the details of container management, making this process feel trivial &#8212; I sure wouldn&#8217;t want to handle this manually.</p><p>Some of the key benefits of Testcontainers include:</p><ul><li><p>Its ability to provide a consistent and reproducible test environment. You can define the exact service version and configuration that you require, ensuring that your test results are reliable and consistent across different environments.</p></li><li><p>The speed and flexibility it brings to your testing and development workflow. By using lightweight Docker containers, you can quickly spin up and tear down test environments on demand. No configuring cloud or shared resources ahead of time&#8230; Just on-the-fly awesomeness.</p></li><li><p>Seamless integration with existing testing frameworks and tools in the DotNet ecosystem, such as Xunit, NUnit, and BenchmarkDotNet. This allows you to easily incorporate containerized service instances into your existing test suites without any major modifications.</p></li></ul><p>For this article, we&#8217;ll be focused on how we can use C# Testcontainers for MongoDB in particular. Much of the advice covered here will be applicable to other services, especially databases, but we&#8217;ll keep our sights set on MongoDB.</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Setting Up Testcontainers in C#</strong></h2><p>To get started with Testcontainers in C#, you&#8217;ll need to install and configure the necessary dependencies in your project. Follow the steps below to set up Testcontainers for MongoDB in C#.</p><h3><strong>1. Installing Testcontainers</strong></h3><p>Generally, the first step would be to install the Testcontainers NuGet package in your C# project. You would open the NuGet Package Manager Console and run the following command:</p><pre><code><code>Install-Package Testcontainers</code></code></pre><p>However, we need the MongoDB flavor of this package (I am using version 3.8.0 at the time of writing) which includes the base Testcontainers package. You can install via the package manager user interface or with this command:</p><pre><code><code>Install-Package Testcontainers.MonogoDB</code></code></pre><h3><strong>2. Configuring Testcontainers for MongoDB</strong></h3><p>Once you have installed Testcontainers, you need to configure it for MongoDB. This involves setting up a MongoDB container with the required settings. Here is an example of how you can configure Testcontainers for MongoDB in C#:</p><pre><code><code>using Testcontainers.MongoDb;

MongoDbContainer container = new MongoDbBuilder()
    .WithImage("mongo:latest")
    .Build();
</code></code></pre><p>In the above example, we create a new instance of the <code>MongoDbBuilder </code>and specify the MongoDB image and port binding. The <code>WithImage</code> method sets the image for the MongoDB container, so using &#8220;mongo:latest&#8221; will always pull the latest image.</p><p>Optionally, we could use port binding to configure which ports we want to be using explicitly:</p><pre><code><code>using Testcontainers.MongoDb;

MongoDbContainer container = new MongoDbBuilder()
    .WithImage("mongo:latest")
    .WithPortBinding(1337, 27017)
    .Build();</code></code></pre><p>The code above uses <code>WithPortBinding</code> method binds the container&#8217;s port 27017 to the host machine&#8217;s port 1337. We&#8217;ll see in the upcoming sections that unless you have a specific need to bind ports, you can potentially just leave this be. We can get a dynamic connection string, which is very convenient!</p><h3>3. Starting and Stopping the MongoDB Container</h3><p>After configuring Testcontainers for MongoDB, you can start and stop the container as needed. Here are code examples for starting and stopping the container:</p><p>To start the MongoDB container:</p><pre><code><code>await container.StartAsync();</code></code></pre><p>To stop the MongoDB container:</p><pre><code><code>await _container.StopAsync();</code></code></pre><p>Remember the MongoDbContainer type can be disposed of, so call <code>DisposeAsync</code> to cleanup when you&#8217;re ready.</p><div><hr></div><h2><strong>Using C# Testcontainers for MongoDB in Practice</strong></h2><p>Now that we&#8217;ve seen how to spin up and tear down containers, what are we supposed to do with them? We have plenty of options, and truly, the limit is your own imagination (and time, money, and other resources&#8230;)!</p><p>Most people leverage C# Testcontainers for writing integration or <a href="https://www.devleader.ca/2021/05/07/tldr-unit-vs-functional-tests/">functional tests</a>. You can match up Testcontainers with xUnit or NUnit, for example, and write tests that interact with a real database.</p><p>For me, I needed to go wire C# Testcontainers for MongoDB up to BenchmarkDotNet so I could <a href="https://www.devleader.ca/2024/03/28/c-mongodb-insert-benchmarks-what-you-need-to-know/">benchmark inserting records into MongoDB</a>! A similar use case where I needed transient local databases, but not necessarily for a test framework.</p><p>Regardless, we need to be able to connect to these MongoDB database containers from C#, and these next subsections will cover that.</p><h3><strong>Connecting to C# Testcontainers for MongoDB with MongoDB.Driver</strong></h3><p>Let&#8217;s assume you read the earlier sections and you have the correct MongoDB package installed for Testcontainers. If you skimmed ahead to this section, go back, read it, and get the right package. Otherwise, you&#8217;ll be scratching your head about why you can&#8217;t find the right dependencies!</p><p>You&#8217;ll also need to get the MongoDB.Driver NuGet package installed. This is what we&#8217;re going to be using to establish a connection to the database container that we spun up. I have other articles you can read if you want more explanation on how MongoDB.Driver works in general:</p><ul><li><p><a href="https://www.devleader.ca/2024/03/22/mongodb-in-c-simplified-guide-for-inserting-data/">MongoDB in C#: Simplified Guide For Inserting Data</a></p></li><li><p><a href="https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/">MongoDB Filtering in C# &#8211; Beginner&#8217;s Guide For Easy Filters</a></p></li><li><p><a href="https://www.devleader.ca/2024/03/26/how-to-delete-documents-from-mongodb-in-c-what-you-need-to-know/">How To Delete Documents From MongoDB In C# &#8211; What You Need To Know</a></p></li><li><p><a href="https://www.devleader.ca/2024/03/25/how-to-update-mongodb-documents-in-c-what-you-need-to-know/">How To Update MongoDB Documents in C# &#8211; What You Need To Know</a></p></li></ul><p>With the right packages ready to go, we can combine the code we saw earlier with some MongoDB driver code to get things glued together:</p><pre><code><code>using MongoDB.Bson;
using MongoDB.Driver;

using Testcontainers.MongoDb;

MongoDbContainer container = new MongoDbBuilder()
    .WithImage("mongo:latest")
    .Build();
await container.StartAsync();
string connectionString = container.GetConnectionString();

MongoClient mongoClient = new MongoClient(connectionString);
IMongoDatabase database = mongoClient.GetDatabase("test");
IMongoCollection&lt;BsonDocument&gt; collection = database.GetCollection&lt;BsonDocument&gt;("test");</code></code></pre><p>In the example above, we can call <code>GetConnectionString()</code> on the newly spun up MongoDB container from Testcontainers. The awesome part about this is that no matter how you configure your Testcontainer for MongoDB using the <a href="https://www.devleader.ca/2023/09/29/the-builder-pattern-what-it-is-and-how-to-use-it-effectively/">builder pattern</a> we see in this code and earlier in the article, <code>GetConnectionString()</code> will get you what you need to connect.</p><p>Because <code>MongoClient</code> takes in a connection string as a single argument, it&#8217;s trivial to get access to the MongoDB database to start working with it right away!</p><h3><strong>Performing CRUD Operations on the MongoDB Testcontainer</strong></h3><p>Now that we have our MongoDB Testcontainer set up and we have a <code>MongoClient</code> connected to it, we can start performing CRUD operations on it. The connection details provided by the container instance made it a breeze to combine these two things, and truly we can focus on just the MongoDB.Driver method calls for CRUD.</p><p>Here&#8217;s an example of performing a simple CRUD operation:</p><pre><code><code>// using code from earlier examples...

// Create
await collection.InsertOneAsync(new BsonDocument()
{
    ["Name"] = "Nick Cosentino",
});

// Read
var filterBuilder = Builders&lt;BsonDocument&gt;.Filter;
var filter = filterBuilder.Eq("Name", "Nick Cosentino");
var results = collection.Find(filter);

// Update
var updateBuilder = Builders&lt;BsonDocument&gt;.Update;
var update = updateBuilder.Set("Name", "Dev Leader");
collection.UpdateOne(filter, update);

// Delete
filter = filterBuilder.Eq("Name", "Dev Leader");
collection.DeleteOne(filter);</code></code></pre><p>Using the previous code snippets, we were already up and running with our MongoDB container instance and a <code>MongoClient</code>. As a result, you can see in the code snippet above that we can directly work with our <code>IMongoCollection&lt;BsonDocument&gt;</code> that we obtained from the prior setup. This helps illustrate that once you have the MongoDB docker container up and running via Testcontainers, you don&#8217;t have to treat things any special way once you connect to it!</p><div><hr></div><h2><strong>Wrapping Up C# Testcontainers for MongoDB</strong></h2><p>To conclude, C# Testcontainers for MongoDB is an incredibly simple way to get a transient MongoDB data store up and running for your testing and development. While this article didn&#8217;t focus on specific use cases, hopefully you have a better understanding of how transparent it feels to layer a MongoDB driver on top of Testcontainers to interact with MongoDB. Given that C# Testcontainers takes the headache out of setup, teardown, and even connection string management, it&#8217;s an easy recommendation from me if you want to get up and running with MongoDB for local usage.</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/c-testcontainers-for-mongodb-how?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">If you found this information useful, consider sharing this article!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/c-testcontainers-for-mongodb-how?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/c-testcontainers-for-mongodb-how?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h3>Want More Dev Leader&nbsp;Content?</h3><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div></li></ul>]]></content:encoded></item><item><title><![CDATA[How To Delete Documents From MongoDB In C# – What You Need To Know]]></title><description><![CDATA[In my recent blogs, I&#8217;ve covered many of the basics of working with MongoDB from C#. I highly suggest you check out how you can perform filtering of documents from MongoDB in C# since it will be a stepping stone before we get into deleting. In this article, I&#8217;ll cover]]></description><link>https://devleader.substack.com/p/how-to-delete-documents-from-mongodb</link><guid isPermaLink="true">https://devleader.substack.com/p/how-to-delete-documents-from-mongodb</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Wed, 03 Apr 2024 12:01:25 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/26/how-to-delete-documents-from-mongodb-in-c-what-you-need-to-know/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp" width="1280" height="720" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:76346,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/26/how-to-delete-documents-from-mongodb-in-c-what-you-need-to-know/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F45295109-06a9-4200-83d2-5ccba12530da_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/26/how-to-delete-documents-from-mongodb-in-c-what-you-need-to-know/">This article was originally posted on my website</a>!</figcaption></figure></div><p>In my recent blogs, I&#8217;ve covered many of the basics of working with MongoDB from C#. I highly suggest you check out <a href="https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/">how you can perform filtering of documents from MongoDB in C#</a> since it will be a stepping stone before we get into deleting. In this article, I&#8217;ll cover <a href="https://www.devleader.ca/2024/03/26/how-to-delete-documents-from-mongodb-in-c-what-you-need-to-know/">how to delete documents from MongoDB in C#</a> and the code examples will assume you have some basic MongoDB filtering knowledge already</p><p>If you want to incorporate MongoDB into your C# application and want to understand how to delete documents, read on!</p><div><hr></div><h2><strong>Basics of MongoDB in C#</strong></h2><p>To get started with MongoDB in C#, you&#8217;ll need to install the MongoDB driver for C#. This driver provides a high-level API for interacting with MongoDB from your C# code, and it&#8217;s <a href="https://www.nuget.org/packages/MongoDB.Driver">as simple as getting the NuGet package installed</a>. Once you have the driver installed, you can establish a connection to your MongoDB database and start working with documents.</p><p>If you&#8217;re using something like MongoDB Atlas and the desktop tool Compass, these should walk you through how you can get your connection string sorted out. However, if you&#8217;re using other hosting providers or hosting locally, you&#8217;ll need to follow relevant instructions for how to get your connection string set up so that you can connect properly. Unfortunately, I can&#8217;t document this for every possibility &#128578;</p><p>In MongoDB, data is stored in collections, which are analogous to tables in a relational database. Maybe not structurally or how they&#8217;re implemented, but conceptually this is the easiest way to think about them. Each document within a collection is a JSON-like object that can have different fields and values. In SQL databases, we&#8217;re used to thinking about rows representing our data, and a single row spans multiple columns in a table. However, in a document database like MongoDB, the &#8220;row&#8221; is an entire document, which can be hierarchical data. To delete a document from MongoDB, you need to specify the collection and the document you want to delete.</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">If you enjoy this article, subscribe for more!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Before We Delete Documents From MongoDB In C#&#8230;</strong></h2><p>Before getting ahead of ourselves here with deleting documents, it&#8217;s important to make sure we understand how filtering works. This is because to delete the correct documents, we need to make sure that we can identify WHICH documents we need to delete! In production, you really need to get this right. If you&#8217;re not filtering properly, you could be risking dropping all sorts of incorrect documents from your database&#8230; and I don&#8217;t even want to think about the fun times ahead for recovering that.</p><p>If you need a primer on how to filter, you can read <a href="https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/">this article on filtering MongoDB records from C#</a>. And if that&#8217;s not straightforward or aligned with your learning style, you may find <a href="https://youtu.be/2zXvDW2YFcg">this video on using C# to filter MongoDB records</a> of better value:</p><div id="youtube2-2zXvDW2YFcg" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;2zXvDW2YFcg&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/2zXvDW2YFcg?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div><hr></div><h2><strong>DeleteOne and DeleteOneAsync in MongoDB</strong></h2><p>The <code>DeleteOne</code> method deletes a single document that matches the specified filter criteria. It&#8217;s important to note here that there&#8217;s nothing that forces you to write a filter that will match a single document and if you do intend to potentially match multiple documents we&#8217;ll see more about that in the next section</p><p>The MongoDB C# driver allows you to write a filter that&#8217;s empty to match EVERY document and call <code>DeleteOne</code>. But what would you expect to happen in this case? You&#8217;re going to match every document with the filter but the method call will still only delete one document. Is it the document you expect? Probably by definition, no, if you wrote a filter that matches multiple. Try to pay special attention to this!</p><p>Here&#8217;s a simple example of calling the <code>DeleteOne</code> method, and an important callout that there is an async version as well:</p><pre><code><code>var filter = Builders&lt;MyDocument&gt;.Filter.Eq("fieldName", "fieldValue");
var result = collection.DeleteOne(filter);

// async version
// var result = await collection.DeleteOneAsync(filter);</code></code></pre><p>The result that is returned has a matched and deleted count that we can investigate. It&#8217;s worth noting in all of my experience so far that even if your filter matches MANY items, if you call <code>DeleteOne</code> it will at most show you a matched count of one still. As a result, this does not seem to be a reliable way to tell if your filter would have (or did) match multiple items and still only delete one.</p><div><hr></div><h2><strong>DeleteMany and DeleteManyAsync in MongoDB</strong></h2><p>Much like the previous example, <code>DeleteMany</code> and <code>DeleteManyAsync</code> behave similarly except that they are intended to be used with and support handling the deletion of multiple documents. <code>DeleteOne</code> will not throw an exception if the filter matched multiple documents, but if your intention is truly to be able to support multiple document deletion, these are the methods to use instead.</p><p>The code example below shows the sync and async variations:</p><pre><code><code>var filter = Builders&lt;MyDocument&gt;.Filter.Gte("fieldValue", minValue);
var result = collection.DeleteOne(filter);

// async version
//var result = await collection.DeleteOneAsync(filter);</code></code></pre><p>Like <code>DeleteOne</code>, the result that we have to work with has the matched and deleted counts. However, unlike <code>DeleteOne</code>, the match count will indicate how many items truly did match the filter and not be limited to one at most. Again, use these method variations if you need to support multiple documents matching the filter.</p><div><hr></div><h2><strong>FindOneAndDelete and FindOneAndDeleteAsync Methods</strong></h2><p><code>FindOneAndDelete</code> and the async variation are very much like <code>DeleteOne</code> method variations. These methods will perform a delete of up to one document matching the filter, but the interesting difference is the return value. The return type provides us access to the document that matched the filter and was deleted from MongoDB.</p><p>Here&#8217;s a code example of <code>FindOneAndDelete</code>:</p><pre><code><code>var filter = Builders&lt;MyDocument&gt;.Filter.Gte("fieldValue", minValue);
var result = collection.FindOneAndDelete(filter);

// async version
//var result = await collection.FindOneAndDeleteAsync(filter);</code></code></pre><p>The result that comes back from this method call is the document that matched the filter and was deleted. This can be especially useful if you need to work with the record information and want to save yourself an extra query and logic to validate the response.</p><p>If you want to see this method along with the ones from the earlier section in action, you can check out <a href="https://youtu.be/wK2TlqTY3nw">this video on how to delete documents from MongoDB in C#</a>:</p><div id="youtube2-wK2TlqTY3nw" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;wK2TlqTY3nw&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/wK2TlqTY3nw?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div><hr></div><h2><strong>Wrapping Up How To Delete Documents From MongoDB In C#</strong></h2><p>And now you have all of the basics covered on how to delete documents from MongoDB in C#! In this article, I covered several variations that are all very similar and only need a filter definition to work with:</p><ul><li><p>DeleteOne: deletes up to one single document based on the filter</p></li><li><p>DeleteMany: deletes all of the matching documents based on the filter</p></li><li><p>FindOneAndDelete: deletes up to one single document based on the filter and returns the matching document that was deleted</p></li></ul><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/how-to-delete-documents-from-mongodb?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Share this article if you found it helpful!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/how-to-delete-documents-from-mongodb?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/how-to-delete-documents-from-mongodb?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h3>Want More Dev Leader&nbsp;Content?</h3><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div></li></ul>]]></content:encoded></item><item><title><![CDATA[How To Update MongoDB Documents in C# – What You Need To Know]]></title><description><![CDATA[Recently I&#8217;ve been publishing content on working with MongoDB from C#, and this article continues on that path. If you haven&#8217;t already covered how you can perform filtering of documents from MongoDB in C#, I&#8217;d highly suggest you get a basic understanding before continuing. In this article, I&#8217;ll cover]]></description><link>https://devleader.substack.com/p/how-to-update-mongodb-documents-in-csharp</link><guid isPermaLink="true">https://devleader.substack.com/p/how-to-update-mongodb-documents-in-csharp</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Tue, 02 Apr 2024 12:01:37 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/25/how-to-update-mongodb-documents-in-c-what-you-need-to-know/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:85430,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/25/how-to-update-mongodb-documents-in-c-what-you-need-to-know/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F64a00eff-3f70-46b8-ac3d-1920c1b17f81_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/25/how-to-update-mongodb-documents-in-c-what-you-need-to-know/">This article was originally posted on my website</a>!</figcaption></figure></div><p>Recently I&#8217;ve been publishing content on working with MongoDB from C#, and this article continues on that path. If you haven&#8217;t already covered <a href="https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/">how you can perform filtering of documents from MongoDB in C#</a>, I&#8217;d highly suggest you get a basic understanding before continuing. In this article, I&#8217;ll cover <a href="https://www.devleader.ca/2024/03/25/how-to-update-mongodb-documents-in-c-what-you-need-to-know/">how to update MongoDB documents in C#</a> but the code examples will assume you know how to filter what you&#8217;re interested in!</p><p>If you&#8217;re looking to incorporate MongoDB into your C# application and want to understand how to update documents, read on!</p><div><hr></div><h2><strong>Basics of MongoDB in C#</strong></h2><p>To get started with MongoDB in C#, you&#8217;ll need to install the MongoDB driver for C#. This driver provides a high-level API for interacting with MongoDB from your C# code, and it&#8217;s <a href="https://www.nuget.org/packages/MongoDB.Driver">as simple as getting the NuGet package installed</a>. Once you have the driver installed, you can establish a connection to your MongoDB database and start working with documents.</p><p>If you&#8217;re using something like MongoDB Atlas and the desktop tool Compass, these should walk you through how you can get your connection string sorted out. However, if you&#8217;re using other hosting providers or hosting locally, you&#8217;ll need to follow relevant instructions for how to get your connection string set up so that you can connect properly. Unfortunately, I can&#8217;t document this for every possibility &#128578;</p><p>In MongoDB, data is stored in collections, which are analogous to tables in a relational database. Maybe not structurally or how they&#8217;re implemented, but conceptually this is the easiest way to think about them. Each document within a collection is a JSON-like object that can have different fields and values. In SQL databases, we&#8217;re used to thinking about rows to update, and a single row spans multiple columns in a table. However, in a document database like MongoDB, the &#8220;row&#8221; is an entire document, which can be hierarchical data. To update a document in MongoDB, you need to specify the collection and the document you want to update.</p><div><hr></div><h2><strong>Updating Documents in MongoDB Using C#</strong></h2><p>Before getting ahead of ourselves here with updating, it&#8217;s important to make sure we understand how filtering works. This is because to update the correct documents, we need to make sure that we can identify WHICH documents we need to update! If your filter is wrong, you&#8217;ll be in for a world of pain &#8212; or maybe not pain but a high amount of discomfort as you&#8217;re debugging database issues.</p><p>If you need a primer on how to filter, you can read <a href="https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/">this article on filtering MongoDB records from C#</a>. And if that&#8217;s not straightforward or aligned with your learning style, you may find <a href="https://youtu.be/2zXvDW2YFcg">this video on using C# to filter MongoDB records</a> of better value:</p><div id="youtube2-2zXvDW2YFcg" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;2zXvDW2YFcg&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/2zXvDW2YFcg?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div><hr></div><h2><strong>UpdateOne and UpdateOneAsync in MongoDB</strong></h2><p>The <code>UpdateOne</code> method updates a single document that matches the specified filter criteria. You can use the $set operator to update specific fields within the document, or in C# specifically, by calling the Set() method on the update builder.</p><p>It&#8217;s important to note here that there&#8217;s nothing that forces you to write a filter that will match a single document. In fact, you can write a filter that&#8217;s just empty to match EVERY document and call <code>UpdateOne</code>. By doing that, you&#8217;re going to match every document but the method call will still only update one document. Is it the document you expect? Probably by definition, no, if you wrote a filter that matches multiple. Try to pay special attention to this!</p><p>Here&#8217;s a simple example of calling the <code>UpdateOne</code> method, and an important callout that there is an async version as well:</p><pre><code><code>var filter = Builders&lt;MyDocument&gt;.Filter.Eq("fieldName", "fieldValue");
var update = Builders&lt;MyDocument&gt;.Update.Set("fieldName", "newValue");

var result = collection.UpdateOne(filter, update);

// async version
// var result = await collection.UpdateOneAsync(filter, update);</code></code></pre><p>The result that is returned has a matched and modified count that we can investigate. It&#8217;s worth noting in all of my experience so far that even if your filter matches MANY items, if you call <code>UpdateOne</code> it will at most show you a matched count of one still. As a result, this does not seem to be a reliable way to tell if your filter would have (or did) match multiple items and still only updated one.</p><div><hr></div><h2><strong>UpdateMany and UpdateManyAsync in MongoDB</strong></h2><p>Much like the previous example, <code>UpdateMany</code> and <code>UpdateManyAsync</code> have *almost* the same behavior &#8212; except for one tiny detail which you probably figured out already. The many part.</p><p><code>UpdateMany</code> will allow you to take that same approach with your filter and update all of the records that match the filter in the way that you&#8217;ve defined your update definition. If you truly expect your filter to be able to match multiple, I would advise using this &#8212; otherwise, <code>UpdateOne</code> makes more sense.</p><p>The code example below shows the sync and async variations:</p><pre><code><code>var filter = Builders&lt;MyDocument&gt;.Filter.Gte("fieldValue", minValue);
var update = Builders&lt;MyDocument&gt;.Update.Set("fieldName", "newValue");

var result = collection.UpdateMany(filter, update);

// async version
//var result = await collection.UpdateManyAsync(filter, update);</code></code></pre><p>Like <code>UpdateOne</code>, the result that we have to work with has the matched and updated counts. However, unlike <code>UpdateOne</code>, the match count will indicate how many items truly did match the filter and not be limited to one at most.</p><div><hr></div><h2><strong>FindOneAndUpdate and FindOneAndUpdateAsync Methods</strong></h2><p><code>FindOneAndUpdate</code> and the async variation are very much like <code>UpdateOne</code> method variations. These methods will perform an update on up to one document matching the filter, but the interesting difference is the return value. The return <a href="https://www.devleader.ca/2023/01/29/simple-secrets-to-access-to-the-dotnet-record-type/">type provides us access</a> to a snapshot of the document that matched the filter BEFORE it was updated.</p><p>Here&#8217;s a code example of <code>FindOneAndUpdate</code>:</p><pre><code><code>var filter = Builders&lt;MyDocument&gt;.Filter.Gte("fieldValue", minValue);
var update = Builders&lt;MyDocument&gt;.Update.Set("fieldName", "newValue");

var result = collection.FindOneAndUpdate(filter, update);

// async version
//var result = await collection.FindOneAndUpdateAsync(filter, update);</code></code></pre><p>The result that comes back from this method call would provide the matching document where <code>fieldName</code> would still be whatever value existed before it was set to &#8220;newValue&#8221;. This can be useful in eliminating a full round-trip to the database if you want to know ahead of time which document was going to be updated.</p><p>Check out <a href="https://youtu.be/fnPRmoSlTHE">this video on these MongoDB document update features in C#</a>:</p><div id="youtube2-fnPRmoSlTHE" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;fnPRmoSlTHE&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/fnPRmoSlTHE?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div><hr></div><h2><strong>Wrapping Up How To Update MongoDB Documents in C#</strong></h2><p>And now you have all of the basics covered on how to update MongoDB documents in C#! In this article, I covered several variations that are all very similar given that they require a proper filter and a proper update definition to be written:</p><ul><li><p>UpdateOne: updates up to one single document based on the filter</p></li><li><p>UpdateMany: updates all of the matching documents based on the filter</p></li><li><p>FindOneAndUpdate: updates up to one single document based on the filter and returns the matching document BEFORE it was updated</p></li></ul><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/how-to-update-mongodb-documents-in-csharp?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thank you for reading Dev Leader Articles. This post is public so feel free to share it!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/how-to-update-mongodb-documents-in-csharp?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/how-to-update-mongodb-documents-in-csharp?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h3>Want More Dev Leader&nbsp;Content?</h3><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div></li></ul>]]></content:encoded></item><item><title><![CDATA[MongoDB Filtering In C# – Beginner’s Guide For Easy Filters]]></title><description><![CDATA[I am making more of an effort to familiarize myself with document databases in my side projects, and MongoDB is currently my go-to. In fact, I recently wrote about inserting data to MongoDB in C# and wanted to follow up with this article&#8217;s topic: MongoDB filtering in C#]]></description><link>https://devleader.substack.com/p/mongodb-filtering-in-c-beginners</link><guid isPermaLink="true">https://devleader.substack.com/p/mongodb-filtering-in-c-beginners</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Mon, 01 Apr 2024 12:01:41 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:68958,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff3ce1252-8e53-4c9f-977e-0c5ba6c15ec9_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/">This article was originally posted on my website</a>!</figcaption></figure></div><p>I am making more of an effort to familiarize myself with document databases in my side projects, and MongoDB is currently my go-to. In fact, I recently <a href="https://www.devleader.ca/2024/03/22/mongodb-in-c-simplified-guide-for-inserting-data/">wrote about inserting data to MongoDB in C#</a> and wanted to follow up with this article&#8217;s topic: <a href="https://www.devleader.ca/2024/03/24/mongodb-filtering-in-c-beginners-guide-for-easy-filters/">MongoDB filtering in C#</a>. Filtering is important when it comes to MongoDB, not only to be able to query for records&#8230; but because when you want to run a delete or an update, you also need to filter properly!</p><p>This article focuses on <a href="https://www.devleader.ca/2024/02/22/c-for-beginners-5-simplified-concepts-in-c/">beginner concepts</a> when it comes to working with MongoDB filters. You&#8217;ll see simplified code examples demonstrating how to construct filters so when it&#8217;s time to query, delete, or update you&#8217;ll be all set.</p><div><hr></div><h2><strong>MongoDB Filtering in C# Using FilterDefinitionBuilders</strong></h2><p>When working with MongoDB in C#, one powerful tool for filtering documents is the MongoDB <code>FilterDefinitionBuilder</code>. The <code>FilterDefinitionBuilder</code> allow us to construct filter expressions easily and efficiently, making the process of querying MongoDB much simpler.</p><p>I personally like to start off by getting an instance of the FilterDefinitionBuilder and then creating the <code>FilterDefinition</code> directly from that. However, if I plan on building more complex rules out for filtering, I&#8217;ll generally start with the FilterDefinitionBuilder instance and an instance of an empty <code>FilterDefinition</code>.</p><p>Here&#8217;s an example of how to use the MongoDB <code>FilterDefinitionBuilder</code> to filter documents in MongoDB using C#:</p><pre><code><code>var filterBuilder = Builders&lt;BsonDocument&gt;.Filter;
var filter = filterBuilder.Eq("field", "value");
var results = collection.Find(filter).ToList();</code></code></pre><p>In the code above, we get the <code>FilterDefinitionBuilder</code> instance assigned to a variable for use. This assignment is technically unnecessary, but I find it helps clean code up if I need to ask for the <code>FilterDefinitionBuilder</code> instance multiple times. From there, we&#8217;re using an &#8220;eq&#8221; filter for an equality filter on a field called &#8220;field&#8221; and a string value of &#8220;value&#8221;. Not very creative, but gets the job done!</p><p>If you want to follow along with the content in this article, you can <a href="https://youtu.be/2zXvDW2YFcg">check out this video on filtering data in MongoDB using C#</a>:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg" width="1280" height="720" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;YouTube player&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="YouTube player" title="YouTube player" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48e9486c-09a6-4713-8219-f541a467085a_1280x720.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><div><hr></div><h2><strong>MongoDB&#8217;s Comparison Operators</strong></h2><p>In order to get up to speed with filtering in MongoDB, we need to understand the comparison operators. These operators allow you to compare specific field values with other values or expressions. Some commonly used comparison operators include:</p><ul><li><p>$eq: Matches values that are equal to a specified value.</p></li><li><p>$ne: Matches values that are not equal to a specified value.</p></li><li><p>$gt: Matches values that are greater than a specified value.</p></li><li><p>$lt: Matches values that are less than a specified value.</p></li></ul><p>The <code>FilterDefinitionBuilder</code> has access to methods that map to these operators. Consider the following example where we want to retrieve all documents from a MongoDB collection where the age is greater than or equal to 18:</p><pre><code><code>var ageFilter = Builders&lt;Person&gt;.Filter.Gte(x =&gt; x.Age, 18);
var filteredDocuments = collection.Find(ageFilter).ToList();</code></code></pre><p>In this example, we use the <code>$gte</code> comparison operator (which stands for &#8220;greater than or equal to&#8221;) to filter documents where the age field is greater than or equal to 18. We use the <code>Builders&lt;Person&gt;</code> static class, with a type parameter for the type of our entity, so that we can see the properties when we build the filter expression. If we use <code>BsonDocument</code> as the type, we need to provide the property name in a string:</p><pre><code><code>var ageFilter = Builders&lt;BsonDocument&gt;.Filter.Gte("Age", 18);
var filteredDocuments = collection.Find(ageFilter).ToList();</code></code></pre><div><hr></div><h2><strong>Range Queries and Pattern Matching in MongoDB</strong></h2><p>MongoDB also provides operators that enable you to perform range queries and pattern matching. Two commonly used operators for these purposes are:</p><ul><li><p>$in: Matches any of the specified values in an array.</p></li><li><p>$regex: Matches documents based on a specified pattern using regular expressions.</p></li></ul><p>These operators are particularly useful when you want to filter documents based on a range of values or apply pattern-based filters. Now let&#8217;s check out an example that demonstrates how to perform a range query using the <code>$in</code> operator:</p><pre><code><code>var rangeFilter = Builders&lt;Person&gt;.Filter.In(x =&gt; x.Age, new[] { 18, 19, 20 });
var filteredDocuments = collection.Find(rangeFilter).ToList();</code></code></pre><p>Like before, we use the <code>Builders&lt;Person&gt;</code> static class. Here, we utilize the <code>$in</code> operator to filter documents where the age field matches any of the specified values in the given array.</p><div><hr></div><h2><strong>Combining Filters for MongoDB in C#</strong></h2><p>Now that we&#8217;ve seen how to create some basic MongoDB filters in C#, which are based on the comparison operators we have from MongoDB, it&#8217;s time to think about crafting more advanced filters. To do so, we can use AND and OR operators&#8230; but we have a couple of different flavors:</p><pre><code><code>var filterBuilder = Builders&lt;BsonDocument&gt;.Filter;
var filter = filterBuilder.Empty;

filter = filterBuilder.And(
    filter, 
    filterBuilder.Eq("Name", "Nick Cosentino"));
filter = filterBuilder.And(
    filter, 
    filterBuilder.Gte("Age", 30));</code></code></pre><p>In the code example above, we start with an empty filter and assign it to a filter variable. From there, we use the <code>And()</code> method on the <code>FilterDefinitionBuilder</code> to combine in an <code>Eq()</code> filter followed by a <code>Gte()</code> filter. Keep in mind, this example shows combining filters via AND but we can also OR the filters together.</p><p>Another example does away with the method calls and uses &amp;= and |= for AND and OR respectively. In my opinion, this is a much more legible way to write filters:</p><pre><code><code>var filterBuilder = Builders&lt;BsonDocument&gt;.Filter;
var filter = filterBuilder.Empty;
filter &amp;= filterBuilder.Eq("Name", "Nick Cosentino");
filter &amp;= filterBuilder.Gte("Age", 30);</code></code></pre><p>Do keep in mind that once you start incorporating OR operators for your filters, you will want to consider the order of operations!</p><div><hr></div><h2><strong>Wrapping Up MongoDB Filtering in C#</strong></h2><p>In this article, we got to look at a handful of different comparison operators available for MongoDB filtering in C#. We also got to see how we can combine such filters with two different approaches:</p><ul><li><p>Method calls for And() and Or() on the <code>FilterDefinitionBuilder</code></p></li><li><p>&amp;= and |= on the filters themselves</p></li></ul><p>In upcoming articles, we&#8217;ll see more about how to leverage the filters for querying, updating, and <a href="https://www.devleader.ca/2024/03/26/how-to-delete-documents-from-mongodb-in-c-what-you-need-to-know/">deleting MongoDB documents</a>! If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/mongodb-filtering-in-c-beginners?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thanks for reading! If you think others would find this helpful, please share it!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/mongodb-filtering-in-c-beginners?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/mongodb-filtering-in-c-beginners?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h3>Want More Dev Leader&nbsp;Content?</h3><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><p></p></li></ul>]]></content:encoded></item><item><title><![CDATA[MongoDB in C#: Simplified Guide For Inserting Data]]></title><description><![CDATA[Most of the time when I&#8217;m developing applications, I default to using some form of SQL. Whether it&#8217;s a simple application using SQlite or something a bit more robust that I plan to scale out with MySQL, it&#8217;s inevitably some flavor of SQL. However, when starting new projects over the past few years I&#8217;ve been trying to make sure I have experience with document databases and have]]></description><link>https://devleader.substack.com/p/mongodb-in-c-simplified-guide-for</link><guid isPermaLink="true">https://devleader.substack.com/p/mongodb-in-c-simplified-guide-for</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Sun, 31 Mar 2024 12:01:30 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/22/mongodb-in-c-simplified-guide-for-inserting-data/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:69534,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/22/mongodb-in-c-simplified-guide-for-inserting-data/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1616bf47-5f28-4c0b-a409-8b7bdcdc5ecf_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/22/mongodb-in-c-simplified-guide-for-inserting-data/">This article was originally posted on my website</a>!</figcaption></figure></div><p>Most of the time when I&#8217;m developing applications, I default to using some form of SQL. Whether it&#8217;s a simple application using SQlite or something a bit more robust that I plan to scale out with MySQL, it&#8217;s inevitably some flavor of SQL. However, when starting new projects over the past few years I&#8217;ve been trying to make sure I have experience with document databases and have <a href="https://www.devleader.ca/2024/03/22/mongodb-in-c-simplified-guide-for-inserting-data/">spent more time using MongoDB in C#</a>.</p><p>In this article, I&#8217;ll guide you through some basics for being able to insert data using MongoDB in C#. We&#8217;ll keep it light and to the point, so let&#8217;s dive into a brief overview of MongoDB in C# followed by some code examples in C#!</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/subscribe?"><span>Subscribe now</span></a></p><div><hr></div><h2><strong>Overview of MongoDB in C#</strong></h2><p>MongoDB is a widely used NoSQL database that provides a flexible and scalable solution for data storage. One of the key benefits of MongoDB is its document-oriented nature so instead of using tables with fixed schemas like in traditional relational databases, MongoDB stores data in collections of JSON-like documents. This can allow for a more flexible and dynamic data model, especially in scenarios where data structures can vary.</p><p>In C#, you can seamlessly integrate MongoDB into your applications because MongoDB provides a native driver for C#. This simplifies the process of interacting with the database and provides a comfortable development experience for C# developers.</p><p>Well, mostly. If you&#8217;re used to using SQL connections, SQL command objects, and <code>DataReader</code> classes to access your data, it&#8217;s a little bit more cumbersome. But this is coming from the perspective of someone who prefers to write raw SQL queries in their data access layer. I suspect if you didn&#8217;t have this bias then working with their API, especially for filtering, would feel pretty intuitive.</p><p>One big thing you&#8217;ll want to keep in mind if you&#8217;re coming from a relational database background is understanding the primary differences between relational and document databases. In the former, we generally denormalize data across tables and, in the latter, we write the data as a document that we&#8217;d like to read back without having to join. These types of databases aren&#8217;t designed to join data like we do with relational databases, so it&#8217;s something to be aware of!</p><h3><strong>Follow Along with MongoDB in C# Content</strong></h3><p>I always try to make sure I provide multiple modes of content when I&#8217;m able to. Below you&#8217;ll find a <a href="https://youtu.be/0fB9qg-oR04">YouTube video walking through examples of MongoDB in C# for inserting records</a>:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg" width="1280" height="720" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;YouTube player&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="YouTube player" title="YouTube player" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F427180e1-70a5-45f7-b85f-3596ef1fa5d3_1280x720.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>Of course, if you&#8217;d rather play around with some working code (aside from ensuring you have your own database), you can find the example code on my <a href="https://github.com/ncosentino/DevLeader/tree/master/MongoDBExamples/MongoDBExamples.InsertRecords">Dev Leader GitHub repository here</a>. You should be able to clone it, set up your connection string properly, change your database and collection names as needed, and then rock and roll!</p><div><hr></div><h2><strong>Inserting Documents into MongoDB in C#</strong></h2><p>In this section, I&#8217;ll explain how to insert documents into MongoDB using C#. We&#8217;ll look at code examples using the <code>InsertOne</code> and <code>InsertMany</code> methods. We&#8217;ll see these methods in their synchronous and asynchronous forms! Remember, you will need to ensure you have the &#8220;MongoDB.Driver&#8221; NuGet package installed in your project for the following code examples to work.</p><h3><strong>Using the InsertOne and InsertOneAsync Methods</strong></h3><p>To insert a single document into a MongoDB collection synchronously, use the <code>InsertOne</code> method. This method is straightforward and is executed immediately, blocking the current thread until the operation completes. Here&#8217;s a basic example:</p><pre><code><code>using MongoDB.Bson;
using MongoDB.Driver;

// Connect to MongoDB instance
var client = new MongoClient("mongodb://localhost:27017");

// Select database
var database = client.GetDatabase("testDatabase");

// Select collection (sort of like a SQL "table")
var collection = database.GetCollection&lt;BsonDocument&gt;("myCollection");

var document = new BsonDocument
{
    { "name", "John" },
    { "age", 30 }
};

// Insert document into collection
collection.InsertOne(document);</code></code></pre><p>In this example:</p><ul><li><p>We first establish a connection to the MongoDB instance and select our database and collection.</p></li><li><p>Then, we create a <code>BsonDocument</code> object, which represents the document we want to insert.</p></li><li><p>Finally, we call <code>InsertOne</code> on our collection object, passing in the document. This inserts the document into the specified collection.</p></li></ul><p>For asynchronous operations, you can use <code>InsertOneAsync</code>. This method is especially useful in applications that require non-blocking operations, such as web applications or services, to maintain responsiveness. Here&#8217;s how to use it:</p><pre><code><code>using MongoDB.Bson;
using MongoDB.Driver;
using System.Threading.Tasks;

// just like the former example
var client = new MongoClient("mongodb://localhost:27017");
var database = client.GetDatabase("testDatabase");
var collection = database.GetCollection&lt;BsonDocument&gt;("myCollection");

var document = new BsonDocument
{
    { "name", "Jane" },
    { "age", 28 }
};

// Asynchronously insert document
await collection.InsertOneAsync(document, cancellationToken: CancellationToken.None);</code></code></pre><p>In this asynchronous example:</p><ul><li><p>The setup is similar to the synchronous version, but we use <code>await</code> with <code>InsertOneAsync</code>. This tells the program to continue with other work that doesn&#8217;t depend on the completion of the insert operation.</p></li><li><p>Take note that you can pass in a cancellation token here which is a best practice for async code</p></li></ul><p>Note that both <code>InsertOne</code> and <code>InsertOneAsync</code> methods throw exceptions if the insert operation fails, so you should use try-catch blocks to handle potential errors gracefully.</p><h3><strong>Using the InsertMany and InsertManyAsync Methods</strong></h3><p>The <code>InsertMany</code> method synchronously inserts a list of document objects into the specified collection. This is useful when you have multiple documents ready to be stored and want to execute the operation in a single call. Here&#8217;s an example:</p><pre><code><code>using MongoDB.Bson;
using MongoDB.Driver;
using System.Threading.Tasks;

// just like the former example
var client = new MongoClient("mongodb://localhost:27017");
var database = client.GetDatabase("testDatabase");
var collection = database.GetCollection&lt;BsonDocument&gt;("myCollection");

var documents = new List&lt;BsonDocument&gt;
{
    new BsonDocument("name", "John").Add("age", 30),
    new BsonDocument("name", "Jane").Add("age", 25),
    new BsonDocument("name", "Doe").Add("age", 28)
};

collection.InsertMany(documents);</code></code></pre><p>In this example, we first get a reference to our collection. Then, we <a href="https://www.devleader.ca/2024/03/20/mudblazor-list-items-how-to-create-awesome-blazor-list-views/">create a list</a> of <code>BsonDocument</code> objects, each representing a document to insert. Finally, we call <code>InsertMany</code> with our list of documents. This method will insert all documents in the list into the MongoDB collection in one operation.</p><p>For asynchronous operations, particularly useful in applications where responsiveness is crucial or when dealing with I/O-bound tasks, you can use the <code>InsertManyAsync</code> method. This method works similarly to <code>InsertMany</code>, but it performs the operation asynchronously. Here&#8217;s an example:</p><pre><code><code>using MongoDB.Bson;
using MongoDB.Driver;
using System.Threading.Tasks;

// just like the former example
var client = new MongoClient("mongodb://localhost:27017");
var database = client.GetDatabase("testDatabase");
var collection = database.GetCollection&lt;BsonDocument&gt;("myCollection");

var documents = new List&lt;BsonDocument&gt;
{
    new BsonDocument("name", "John").Add("age", 30),
    new BsonDocument("name", "Jane").Add("age", 25),
    new BsonDocument("name", "Doe").Add("age", 28)
};

await collection.InsertManyAsync(documents);</code></code></pre><p>In this asynchronous version, we use <code>await</code> before calling <code>InsertManyAsync</code>, ensuring that the operation completes before moving on to the next line of code. This is especially important in web applications or services where blocking the main thread could lead to poor performance or user experience.</p><div><hr></div><h2><strong>Best Practices for Efficiently Inserting Data</strong></h2><p>This article is focused on the API usage of inserting data into MongoDB using C#, but I wanted to touch on a few other points. To improve the efficiency of data insertion in MongoDB, you can consider the following best practices:</p><ol><li><p>Batch Inserts: Instead of inserting one document at a time, you can batch multiple documents together and insert them in a single operation using InsertMany. This reduces the overhead of multiple round-trips to the database.</p></li><li><p>Use Indexes: Indexes can significantly improve the insert performance by speeding up the search for the correct position to insert the new document. Ensure that you have appropriate indexes defined on the fields commonly used for insertion.</p></li><li><p>Consider Sharding: If you have a large amount of data to insert, sharding can distribute the data across multiple servers, improving insertion performance.</p></li><li><p>Write Concern: The default write concern in MongoDB is Acknowledged, which waits for an acknowledgment from the server. If you are performing bulk insertions and do not require immediate acknowledgment, you can set a lower write concern to improve performance.</p></li><li><p>Consider Asynchronous Operations: Asynchronous operations can improve the responsiveness of your application by allowing multiple insert operations to be executed concurrently.</p></li></ol><p>Aside from asynchronous versions of these APIs which were mentioned earlier, I won&#8217;t be covering these other topics in more detail in this article. Stay tuned for upcoming articles where I cover these topics along with other functionality, such as updating documents in MongoDB and deleting records!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/mongodb-in-c-simplified-guide-for?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">If you found this helpful, consider sharing it with others to help them!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/mongodb-in-c-simplified-guide-for?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/mongodb-in-c-simplified-guide-for?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h2><strong>Wrapping Up MongoDB in C#</strong></h2><p>To recap, in this article, we explored the topic of writing data to MongoDB in C# using InsertOne and InsertMany APIs. We saw both the synchronous and asynchronous versions of these APIs in functional code examples.</p><p>Some of the key takeaways:</p><ul><li><p>Understanding relational database vs document database characteristics</p></li><li><p>Best practice considerations for performance</p></li><li><p>Synchronous vs asynchronous APIs for inserting data to MongoDB in C#</p></li><li><p>You should continuously improve your skills and stay updated with the latest technologies!</p></li></ul><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/mongodb-in-c-simplified-guide-for/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/mongodb-in-c-simplified-guide-for/comments"><span>Leave a comment</span></a></p><div class="directMessage button" data-attrs="{&quot;userId&quot;:127921856,&quot;userName&quot;:&quot;Dev Leader&quot;,&quot;canDm&quot;:null,&quot;dmUpgradeOptions&quot;:null,&quot;isEditorNode&quot;:true}" data-component-name="DirectMessageToDOM"></div></li></ul>]]></content:encoded></item><item><title><![CDATA[Blazor Render Mode – How To Avoid Dependency Injection Woes]]></title><description><![CDATA[I&#8217;ve been spending more time working with Blazor, which means many more learning opportunities for me. That also means more learning opportunities for me to share with YOU! In this particular case, I was battling with trying to hook some event handlers on some MudBlazor list items&#8230; But it turns out that the]]></description><link>https://devleader.substack.com/p/blazor-render-mode-how-to-avoid-dependency</link><guid isPermaLink="true">https://devleader.substack.com/p/blazor-render-mode-how-to-avoid-dependency</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Fri, 29 Mar 2024 12:01:04 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/21/blazor-render-mode-how-to-avoid-dependency-injection-woes/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:48696,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/21/blazor-render-mode-how-to-avoid-dependency-injection-woes/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc60c49e-e6e5-41d0-8574-b3efa0569fc8_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/21/blazor-render-mode-how-to-avoid-dependency-injection-woes/">This article was originally posted on my website</a>!</figcaption></figure></div><p>I&#8217;ve been spending more time working with Blazor, which means many more learning opportunities for me. That also means more learning opportunities for me to share with YOU! In this particular case, I was battling with trying to hook some event handlers on some MudBlazor list items&#8230; But it turns out that the <a href="https://www.devleader.ca/2024/03/21/blazor-render-mode-how-to-avoid-dependency-injection-woes/">Blazor render mode was the part breaking my dependency injection</a> on the page, which was the culprit of my event hookups never working.</p><p>In this article, I&#8217;ll walk you through the scenario I was facing and how I started debugging. You&#8217;ll see that I realized I was focused on the wrong concept, and once I realized some details about the configured Blazor render mode, things started to make more sense. I hope that this article (and video) help you &#8212; and I am confident they&#8217;ll help me the next time I run into this.</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/subscribe?"><span>Subscribe now</span></a></p><div><hr></div><h2><strong>Before I Knew It Was Blazor Render Mode&#8230;</strong></h2><p>I was heads-down working on some Blazor UI for an application I&#8217;m building, and it&#8217;s the motivation behind whipping up <a href="https://www.devleader.ca/2024/03/20/mudblazor-list-items-how-to-create-awesome-blazor-list-views/">another quick article on MudBlazor list items</a>. The problem was pretty simple: I just wanted to wire up some <a href="http://44.230.1.169/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/">event handlers</a> to some buttons that I had on my list items.</p><p>Here&#8217;s what the code looked like:</p><pre><code><code>@page "/items"

@using DevLeader.Services
@using DevLeader.Services.Items

@inject IItemsService ItemsService

&lt;PageTitle&gt;Dev Leader Is Awesome!&lt;/PageTitle&gt;

&lt;h1&gt;Dev Leader Is Awesome!&lt;/h1&gt;


@if (_itemsCollection == null)
{
    &lt;p&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;
}
else if (_itemsCollection.Count == 0)
{
    &lt;p&gt;&lt;em&gt;No items found.&lt;/em&gt;&lt;/p&gt;
}
else
{
    &lt;MudList&gt;
    @foreach (var item in _itemsCollection)
        {
            &lt;MudListItem&gt;
                &lt;MudCard&gt;
                    &lt;MudCardHeader&gt;
                        @item.Title
                    &lt;/MudCardHeader&gt;
                    &lt;MudCardContent&gt;
                        &lt;MudButtonGroup xs="12" sm="6"&gt;
                            &lt;MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       OnClick="e =&gt; ApproveButton_OnClickAsync(item)"&gt;
                                Approve
                            &lt;/MudButton&gt;
                            &lt;MudButton Variant="Variant.Filled"
                                       Color="Color.Secondary"
                                       OnClick="async e =&gt; await RejectButton_OnClickAsync(item)"&gt;
                                Reject
                            &lt;/MudButton&gt;
                        &lt;/MudButtonGroup&gt;
                    &lt;/MudCardContent&gt;

                &lt;/MudCard&gt;
            &lt;/MudListItem&gt;
        }
    &lt;/MudList&gt;
}

@code {
    private IReadOnlyList&lt;Item&gt;? _itemsCollection;

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();

        var endDateTimeUtc = DateTime.UtcNow.AddDays(1);
        var startDateTimeUtc = DateTime.UtcNow.AddDays(-7);

        _itemsCollection = await ItemsService
            .GetItemsAsync(
                startDateTimeUtc: startDateTimeUtc,
                endDateTimeUtc: endDateTimeUtc,
                cancellationToken: CancellationToken.None)
            .ConfigureAwait(false);
    }

    private async Task ApproveButton_OnClickAsync(Item feedItem)
    {
        await Task.Yield();
    }

    private async Task RejectButton_OnClickAsync(Item feedItem)
    {
        await Task.Yield();
    }
}</code></code></pre><p>You can see that I was even fooling around with trying to see different implementations of the <a href="https://www.devleader.ca/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/">async event handlers</a> &#8212; because they just were NOT triggering no matter what I did. But that turned out to be a red herring because the event handlers not triggering were a symptom of the problem.</p><p>For the rest of this article, I&#8217;ll explain more about that problem (hint: it&#8217;s how dependency injection and render mode play together). I also made this <a href="https://youtu.be/bo7Ahp2r7kI">video about Blazor render modes and how I was debugging this dependency injection issue</a> here:</p><div id="youtube2-bo7Ahp2r7kI" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;bo7Ahp2r7kI&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/bo7Ahp2r7kI?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div><hr></div><h2><strong>Dodging the Red Herring</strong></h2><p>Even though I had set out to go wire up <a href="http://44.230.1.169/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/">event handlers</a> and prove that they worked, the fact that they seemed busted was a red herring. The async event handlers not firing was not because I was doing MudBlazor setup incorrectly, it&#8217;s because there was another problem altogether. And here&#8217;s what was hiding in my console output:</p><pre><code><code>Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]
Unhandled exception rendering component: Cannot provide a value for property 'ServiceImplementation' on type 'MyProject.Pages.MyPage'. There is no registered service of type 'MyProject.IService'.
System.InvalidOperationException: Cannot provide a value for property 'MyService' on type 'MyProject.Pages.MyPage'. There is no registered service of type 'MyProject.IService'.</code></code></pre><p>I figured if I have an exception being thrown on the page, perhaps I shouldn&#8217;t put my energy into the <a href="http://44.230.1.169/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/">async event handlers</a> anymore on the MudBlazor list items&#8230; Odds are, I had a bigger problem to sort out, and that bigger problem was just causing the rest of the page to not load correctly. <em><strong>Spoiler alert</strong></em>: the odds were correct.</p><p>But here&#8217;s what was VERY weird about this situation:</p><ul><li><p>The page was showing results in the MudList component as there was an individual MudListItem populated. The only way this can happen, if you check the code shown earlier in the article, is if my dependency is called.</p></li><li><p>This means, 100% for certain, that the dependency WAS accessible on the page and we DID call and use it successfully.</p></li><li><p>&#8230; Which means now all of a sudden in some cases, we can&#8217;t seem to get the dependency.</p></li></ul><p>From all of my experience using Autofac and other dependency injection frameworks, this was baffling. Generally speaking, if we can resolve a dependency once, we should be able to resolve it again. One could argue maybe subsequent resolutions have different behaviors, but at least the DI framework could identify that there was something registered.</p><p>So&#8230; what makes this situation different than when things are working? To the Internet I went&#8230; which is also why this article and the video I created exist.</p><div><hr></div><h2><strong>Blazor Render Mode Broke My App!</strong></h2><p>Full disclaimer: this is not the fault of Blazor or Blazor render modes being bad&#8230; Nothing like that. This is 100% an issue that I created due to my misunderstanding, or lack of understanding, of how render modes work in Blazor.</p><p>My application is configured to use InteractiveAuto render mode. This is what was configured in the template when I created my application in Visual Studio:</p><pre><code><code>@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

     private IComponentRenderMode? RenderModeForPage =&gt; HttpContext.Request.Path.StartsWithSegments("/Account")
         ? null
         : InteractiveAuto;
}</code></code></pre><p>This means that Blazor will determine when it can do client-side rendering for performance/latency reasons &#8212; in some situations dramatically improving the loading experience for users. The problem? It means that my dependency injection is going to try and take place on the client side!</p><p>Not going to work for me. At least, not with a solution I know of yet&#8230; But I&#8217;m sure we&#8217;ll get there. The internet suggested that I could toggle the Blazor render mode per page, which seemed to be a very sensible move. In fact, this was a great solution that I would have liked to do, however&#8230; Adding the @ directive on the individual pages never worked. The behavior to change the render mode NEVER updated for me. Again, this will be a follow-up article and video when I figure out what the heck was going on.</p><p>The fix for me, at least what will work for now for me, is as follows:</p><pre><code><code>@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    // private IComponentRenderMode? RenderModeForPage =&gt; HttpContext.Request.Path.StartsWithSegments("/Account")
    //     ? null
    //     : InteractiveAuto;

    private IComponentRenderMode? RenderModeForPage =&gt; InteractiveServer;
}</code></code></pre><p>I don&#8217;t need to rely on any client-side rendering right now. This will at least unblock me to continue to develop my Blazor application. As things evolve, I&#8217;ll be sure to come back and revisit this Blazor render mode setting to make a better decision.</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/blazor-render-mode-how-to-avoid-dependency?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">If you found this helpful, consider sharing it!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/blazor-render-mode-how-to-avoid-dependency?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/blazor-render-mode-how-to-avoid-dependency?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h2><strong>Wrapping Up Blazor Render Mode and Dependency Injection</strong></h2><p>Blazor render mode is broken! Okay, I&#8217;m kidding, so hopefully that wasn&#8217;t your takeaway from this article. There are a few key points I wanted to highlight, including that my current solution here may not at all be a viable option for you. And that&#8217;s why I will be creating follow-ups as I sort through this myself.</p><p>My takeaways:</p><ul><li><p>If your code on page isn&#8217;t executing when you think it should be, double check for console errors. Something might be preventing the page to load as you expect.</p></li><li><p>Blazor server-side rendering vs Blazor client-side rendering will in fact treat dependency injection separately. Give this some thought.</p></li><li><p>This is an example of some potential &#8220;technical debt&#8221; that I will need to pay down later&#8230; but I would rather keep building than remain stuck for now.</p></li></ul><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for your support! Subscribe if you want to get more articles delivered right to your email!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p></li></ul>]]></content:encoded></item><item><title><![CDATA[MudBlazor List Items: How To Create Awesome Blazor List Views]]></title><description><![CDATA[I&#8217;m trying to spend more time in Blazor, especially as I build out my next side project. Historically, I&#8217;ve spent a lot of time writing WinForms and WPF applications, but over the past few years, I&#8217;ve been mostly removed from any user interface development. With the rise of Blazor, I feel like I have another opportunity to jump back into things! As I dive a bit deeper, I&#8217;ve found MudBlazor has a great set of UI components &#8212; especially as I]]></description><link>https://devleader.substack.com/p/mudblazor-list-items-how-to-create</link><guid isPermaLink="true">https://devleader.substack.com/p/mudblazor-list-items-how-to-create</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Thu, 28 Mar 2024 12:01:12 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/20/mudblazor-list-items-how-to-create-awesome-blazor-list-views/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:70476,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/20/mudblazor-list-items-how-to-create-awesome-blazor-list-views/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4a14d802-312e-4f04-904e-e60c2b257a4f_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/20/mudblazor-list-items-how-to-create-awesome-blazor-list-views/">This article was originally posted on my website</a>!</figcaption></figure></div><p>I&#8217;m trying to spend more time in Blazor, especially as I build out my next side project. Historically, I&#8217;ve spent a lot of time writing WinForms and WPF applications, but over the past few years, I&#8217;ve been mostly removed from any user interface development. With the rise of Blazor, I feel like I have another opportunity to jump back into things! As I dive a bit deeper, I&#8217;ve found MudBlazor has a great set of UI components &#8212; especially as I <a href="https://www.devleader.ca/2024/03/20/mudblazor-list-items-how-to-create-awesome-blazor-list-views/">started building using the MudBlazor list items</a>!</p><p>In this article, I&#8217;ll share a quick overview of some of the ways that you can use MudBlazor list items, which will focus on MudList and MudListItem components. Check out the quick code tips and see if MudBlazor might be a fit for you!</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe now&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/subscribe?"><span>Subscribe now</span></a></p><div><hr></div><h2><strong>Overview of MudBlazor and List Components</strong></h2><p><a href="https://mudblazor.com/">MudBlazor is a popular UI component library for Blazor development</a> that provides a rich set of ready-to-use components. It simplifies the process of creating responsive and customizable user interfaces in Blazor applications.</p><p>Coming from a WinForms and WPF background, I find I need to spend additional time getting familiar with the Blazor component libraries we have access to. Once you get a level of comfort, creating more powerful UIs feels a lot less restrictive!</p><p>MudList is a key component in MudBlazor that allows us to create lists in our Blazor applications. MudList provides a flexible and configurable way to render list items.</p><p>MudListItems are the individual items within a MudList. They allow for customization and configuration, enabling us to define the appearance and behavior of each list item according to our specific requirements. We&#8217;ll see some code examples coming up that allow us to customize the look and feel of MudListItems to get things the way we want!</p><pre><code><code>&lt;MudList&gt;
    &lt;MudListItem&gt;Item 1&lt;/MudListItem&gt;
    &lt;MudListItem&gt;Item 2&lt;/MudListItem&gt;
    &lt;MudListItem&gt;Item 3&lt;/MudListItem&gt;
    &lt;MudListItem&gt;Item 4&lt;/MudListItem&gt;
&lt;/MudList&gt;</code></code></pre><p>Using MudBlazor&#8217;s MudList and MudListItems components, we can create dynamic and interactive list views in Blazor. MudBlazor takes care of the complexities of handling the rendering and responsiveness, allowing us to focus on the important stuff &#8212; <a href="https://www.devleader.ca/2024/01/13/take-control-of-career-progression-dev-leader-weekly-26/">building good Blazor apps</a>.</p><div><hr></div><h2><strong>Configuring List Items in MudBlazor</strong></h2><p>MudBlazor provides a powerful set of components for configuring list items, allowing you to customize their appearance and behavior to meet your specific needs. In this section, we&#8217;ll check these out by seeing how to add icons, text, and additional components to enhance your list view in Blazor.</p><h3><strong>Adding Icons to MudBlazor List Items</strong></h3><p>MudBlazor offers a wide range of icons that you can easily integrate into your list items. To add an icon, use the <code>Icon</code> property of the <code>MudListItem</code> component and provide the name of the desired icon. For example:</p><pre><code><code>&lt;MudListItem Icon="Icons.Filled.CheckCircle" Text="Completed" /&gt;</code></code></pre><p>I haven&#8217;t yet had a need for icons, but I know that when it comes to adding polish to a UI it can be really helpful. Especially when it comes to making functionality easier to identify and more accessible.</p><h3><strong>Customizing Text and Content:</strong></h3><p>You can customize the text displayed in a list item by setting the <code>Text</code> property. Additionally, MudBlazor allows you to include additional content within a list item using the <code>ChildContent</code> property. For instance:</p><pre><code><code>&lt;MudListItem&gt;
     &lt;MudIcon Icon="Icons.Filled.Speaker" /&gt;
     &lt;span&gt;Notification&lt;/span&gt;
     &lt;MudBadge&gt;5&lt;/MudBadge&gt;
&lt;/MudListItem&gt; </code></code></pre><p>In the above example, the list item contains an icon, a text span, and a badge component. This allows for a more visually appealing and informative list item. You can continue to nest all sorts of things in here! For one of my more recent UI screens, I&#8217;m working on a more complex item layout that requires a grid and multiple components within the MudItem.</p><h3><strong>Responding to Events:</strong></h3><p>MudBlazor provides event handlers that allow you to respond to user interactions with list items. For instance, you can handle the <code>OnClick</code> event to perform an action when a list item is clicked:</p><pre><code><code>&lt;MudListItem OnClick="e =&gt; OnListItemClick(e)"&gt;
     &lt;MudIcon Icon="Icons.Filled.Speaker" /&gt;
     &lt;span&gt;Notification&lt;/span&gt;
     &lt;MudBadge&gt;5&lt;/MudBadge&gt;
&lt;/MudListItem&gt; </code></code></pre><p>In the above example, the <code>OnListItemClick</code> method in your code-behind or component will be called when the list item is clicked. Here we can see the code for the handler:</p><pre><code><code>@code {
    private async Task OnListItemClick(MouseEventArgs e)
    {
        // Handle the click event here
        Console.WriteLine("ListItem clicked!");

        // You can also implement other logic here, 
        // such as navigation or updating UI elements.

        // And... we can use async await!
        await Task.Yield();
    }
}</code></code></pre><p>Writing async event handlers this way is a nice touch compared to some of <a href="https://www.devleader.ca/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/">the nastiness we&#8217;re required to do traditionally with async event handlers</a>. And even though this is much nicer, I&#8217;ll have a follow-up article where I had problems getting this to fire because of some RenderMode issues conflicting with my <a href="https://www.devleader.ca/2013/08/01/dependency-injected-singletons-what/">dependency injection</a> paradigm!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/mudblazor-list-items-how-to-create?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Share this post with your friends that are learning Blazor!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/mudblazor-list-items-how-to-create?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/mudblazor-list-items-how-to-create?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h2><strong>Wrapping Up MudBlazor List Items</strong></h2><p>As I spend more time working in Blazor, I&#8217;m trying to build out more familiarity so I can be as proficient as I used to be with WPF and WinForms. That&#8217;s going to take some time. I think it&#8217;s important to get familiar with the awesome control libraries we have access to, and MudBlazor is a great fit so far.</p><p>It&#8217;s extremely common for us as application developers to need to show data in lists, and we need to do so in a way that&#8217;s obvious to users. MudBlazor has the MudList with MudListItems, and this is a highly configurable way for us to do *just* that.</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Meet other like-minded software engineers and <a href="https://www.devleader.ca/discord-community-access/">join my Discord community</a>!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p></li></ul>]]></content:encoded></item><item><title><![CDATA[Autofac In ASP NET Core – How To Avoid This Debugging Nightmare]]></title><description><![CDATA[Even though we get access to IServiceCollection when building .NET web apps, I still want more. One of the very first things that I do is integrate Autofac in ASP NET Core applications because of the capabilities and APIs of Autofac. The built-in dependency injection support has come a long way, so I don&#8217;t mean to discredit it, but I do still prefer to leverage Autofac.]]></description><link>https://devleader.substack.com/p/autofac-in-asp-net-core-how-to-avoid</link><guid isPermaLink="true">https://devleader.substack.com/p/autofac-in-asp-net-core-how-to-avoid</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Wed, 27 Mar 2024 12:01:49 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/19/autofac-in-asp-net-core-how-to-avoid-this-debugging-nightmare/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:43266,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/19/autofac-in-asp-net-core-how-to-avoid-this-debugging-nightmare/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe02d07f5-6d0c-4970-bac8-d60715e29eea_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/19/autofac-in-asp-net-core-how-to-avoid-this-debugging-nightmare/">This article was originally posted on my website</a>!</figcaption></figure></div><p>Even though we get access to IServiceCollection when building .NET web apps, I still want more. One of the very first things that I do is integrate <a href="https://www.devleader.ca/2024/03/19/autofac-in-asp-net-core-how-to-avoid-this-debugging-nightmare/">Autofac in ASP NET Core applications</a> because of the capabilities and APIs of Autofac. The built-in dependency injection support has come a long way, so I don&#8217;t mean to discredit it, but I do still prefer to leverage Autofac.</p><p>But there&#8217;s a problem &#8212; and that very well might be why you ended up at this article in the first place. Setting up Autofac in ASP NET Core is easy but it&#8217;s also easy to mess up. I seemingly do this on every ASP NET Core project that I start, and I feel like enough is enough. The next time I go to search for how to solve this problem, I&#8217;m going to come across my OWN article and have the &#8220;Aha!&#8221; moment.</p><p>So let&#8217;s see just how easy it is to get Autofac in ASP NET Core.</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">If you enjoy articles like this, make sure to subscribe!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Example ASP NET Core Project</strong></h2><p>To walk through how to configure Autofac in ASP NET Core, I wanted to get us on the same page for a set of code. What better way than to use the built-in weather app project with minimal APIs?! I know that it&#8217;s not that exciting, but it&#8217;ll be much more exciting once you have it working with Autofac.</p><p>Let&#8217;s have a look at the code first, paying attention to the TODO that&#8217;s mentioned:</p><pre><code><code>using Autofac;
using Autofac.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Mvc;
using System.Reflection;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// ... TODO: this is where we need to hook up our dependencies!!

var app = builder.Build();

// Configure the HTTP request pipeline.
app.UseHttpsRedirection();

app.MapGet("/weatherforecast", (MyDependency myDependency) =&gt;
{
    var summaries = myDependency.GetSummaries();
    var forecast = Enumerable.Range(1, 5).Select(index =&gt;
        new WeatherForecast
        (
            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            Random.Shared.Next(-20, 55),
            summaries[Random.Shared.Next(summaries.Count)]
        ))
        .ToArray();
    return forecast;
});

app.Run();

internal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
{
    public int TemperatureF =&gt; 32 + (int)(TemperatureC / 0.5556);
}

public sealed class MyDependency
{
    public IReadOnlyList&lt;string&gt; GetSummaries()
    {
        var summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };
        return summaries;
    }
}</code></code></pre><p>This program is almost identical to the sample weather app, but I pulled the &#8220;summaries&#8221; array into a dedicated class called MyDependency. Not for any good reason except for us to have a class to inject, and we&#8217;ll do so by providing it right on the minimal API definition itself.</p><p>Next, we&#8217;ll need to make sure we get the NuGet package, so make sure you get the <code>Autofac.Extensions.DependencyInjection</code> package. This will by default include Autofac itself, but you&#8217;ll need this NuGet package to <a href="https://www.devleader.ca/2024/02/21/iservicecollection-in-c-simplified-beginners-guide-for-dependency-injection/">interface with the IServiceCollection</a> &#8212; a key part of how we make this all work together!</p><div><hr></div><h2><strong>The Wrong Way to Set Up Autofac in ASP NET Core</strong></h2><p>This is an obligatory part of the article even though I know you came here looking for a solution. I need to include this because I know there are other people out there searching for this, and even if there aren&#8217;t, I know that I will be guaranteed to search for this in the future. I&#8217;d be happy to come across my own article with the example code telling me what&#8217;s wrong! I was passionate enough about this problem that I even put this video together about this exact problem and <a href="https://www.youtube.com/watch?v=Pto8w7TbMlg">how to set up Autofac in ASP NET Core the *right* way</a>:</p><div id="youtube2-Pto8w7TbMlg" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;Pto8w7TbMlg&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/Pto8w7TbMlg?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><p>The problem stems from two main points:</p><ul><li><p>The Autofac devs have left a method in place that shouldn&#8217;t be used anymore (very likely for compatibility purposes)</p></li><li><p>&#8230; I apparently can&#8217;t seem to read or remember, no matter how many times I do this</p></li></ul><p>And I&#8217;d like to take full responsibility. So let&#8217;s check out this code snippet that shows what looks like the obvious way to hook things up:</p><pre><code><code>var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddAutofac(containerBuilder =&gt;
{
    containerBuilder.RegisterType&lt;MyDependency&gt;().SingleInstance();
});</code></code></pre><p>We add the lovely <a href="https://www.devleader.ca/2023/10/01/the-builder-pattern-in-c-how-to-leverage-extension-methods-creatively/">extension method</a> onto our IServiceCollection that allows us to configure a ContainerBuilder instance for Autofac. Awesome!</p><p>Except this doesn&#8217;t work. At all. And if you read the details, here&#8217;s what it says:</p><blockquote><p><em>ONLY FOR PRE-ASP.NET 3.0 HOSTING. THIS WON&#8217;T WORK FOR ASP.NET CORE 3.0+ OR GENERIC HOSTING.</em></p><p><em>Autofac Peeps</em></p></blockquote><p>As I mentioned, apparently I am very bad at reading. I continue to make this mistake. So let&#8217;s check out the next section where we can see that the REAL solution to this is very similar&#8230; maybe just one extra line of code instead.</p><div><hr></div><h2><strong>The Right Way to Set Up Autofac in ASP NET Core</strong></h2><p>This is what you&#8217;re after, so I&#8217;ll keep it short. You&#8217;ll want to switch that AddAutofac() <a href="https://www.devleader.ca/2023/10/01/the-builder-pattern-in-c-how-to-leverage-extension-methods-creatively/">extension method to these two method</a> calls instead:</p><pre><code><code>builder.Host.UseServiceProviderFactory(new AutofacServiceProviderFactory());
builder.Host.ConfigureContainer&lt;ContainerBuilder&gt;(containerBuilder =&gt;
{
    containerBuilder.RegisterType&lt;MyDependency&gt;().SingleInstance();
});</code></code></pre><p>Notice now that we&#8217;re working with the Host property of the builder instead of the IServiceCollection. But these two methods used instead of the original one we looked at will allow you to configure your Autofac ContainerBuilder instance properly.</p><p>From here, you can register dependencies individually, scan assemblies, load up modules &#8212; whatever you&#8217;d like! The dependencies registered onto this container will be available to the classes that are registered on the ContainerBuilder itself AND available to the classes you have as part of the IServiceCollection. Yes, that means your minimal APIs can get all the juicy goodness now from Autofac.</p><div><hr></div><h2><strong>Wrapping Up Autofac in ASP NET Core</strong></h2><p>As we got to see, getting Autofac in ASP NET Core is very straightforward &#8212; IF you use the right method. After creating a video on it and writing an article, I&#8217;m hoping I never have to search for this answer again. But if I do, I know that I got myself covered! Hopefully, this helped you get things configured so you can use Autofac for <a href="https://www.devleader.ca/2024/03/01/scrutor-in-c-3-simple-tips-to-level-up-dependency-injection/">dependency injection</a> in your ASP NET Core apps!</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! <a href="https://www.devleader.ca/discord-community-access/">Head over to my Discord community</a> for hands-on help and discussions with other like-minded software engineers!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/autofac-in-asp-net-core-how-to-avoid?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">If you found this article helpful, consider sharing it with others!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/autofac-in-asp-net-core-how-to-avoid?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/autofac-in-asp-net-core-how-to-avoid?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><p></p></li></ul>]]></content:encoded></item><item><title><![CDATA[7 C# Project Ideas For Beginners To Escape Tutorial Hell]]></title><description><![CDATA[For those trying to get into software development, the question always comes up about how to spend your time most efficiently for learning. There are a seemingly unlimited number of books to choose from, online courses to navigate, YouTube videos to scroll through, and articles to scan. But many developers get stuck in what&#8217;s called &#8220;Tutorial Hell&#8221; where they jump from one tutorial to the next, unable to break the cycle. That&#8217;s why I want to share]]></description><link>https://devleader.substack.com/p/7-c-project-ideas-for-beginners-to</link><guid isPermaLink="true">https://devleader.substack.com/p/7-c-project-ideas-for-beginners-to</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Tue, 26 Mar 2024 12:01:48 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/18/7-c-project-ideas-for-beginners-to-escape-tutorial-hell/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:58892,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/18/7-c-project-ideas-for-beginners-to-escape-tutorial-hell/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc001ad55-6b40-4eab-ba41-3e2d0e74e3f5_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/18/7-c-project-ideas-for-beginners-to-escape-tutorial-hell/">This article was originally posted on my website</a>!</figcaption></figure></div><p>For those trying to get into software development, the question always comes up about how to spend your time most efficiently for learning. There are a seemingly unlimited number of books to choose from, online courses to navigate, YouTube videos to scroll through, and articles to scan. But many developers get stuck in what&#8217;s called &#8220;Tutorial Hell&#8221; where they jump from one tutorial to the next, unable to break the cycle. That&#8217;s why I want to share <a href="https://www.devleader.ca/2024/03/18/7-c-project-ideas-for-beginners-to-escape-tutorial-hell/">these C# project ideas for beginners</a> that&#8217;ll help put an end to that.</p><p>In my opinion, building software is one of the best ways to learn. That doesn&#8217;t mean that the other things I mentioned aren&#8217;t helpful &#8212; I write articles, create videos, and publish courses to help people learn! But I do think that these should be supplementary to you trying to focus on building out software.</p><p>Let&#8217;s jump into these C# project ideas for beginners and get you started on building something!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">If you find these project ideas helpful, remember to subscribe for similar content!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>1 &#8211; Build a Chatbot</strong></h2><p>Building a chatbot is a great way to experiment with AI and natural language processing! You&#8217;ve probably noticed AI is getting a ton of attention unless you&#8217;ve been disconnected from civilization, so that means there&#8217;s a steady stream of new interesting things to look into.</p><p>I like working with the Azure OpenAI offering, which you can check out here: <a href="https://azure.microsoft.com/en-us/products/ai-services/openai-service">Azure OpenAI Service</a>. When ChatGPT was getting a lot more attention early on in its launch, I even went ahead and created some C# APIs and videos on using them!</p><p>Now, I&#8217;m no longer a fresh software developer. I haven&#8217;t been for 20 years or so. But I still thought it was a fun and exciting project to work through because it was interesting &#8212; and that will be a common theme here. You want to work on things that you find interesting so that they keep you engaged.</p><p>Even a simple chatbot can be built in a console which allows you to focus on how to follow an API spec and send/receive web requests/responses. If you reduce the problem space to just calling the API properly, you can start to add in more fancy features from there.</p><div><hr></div><h2><strong>2 &#8211; Develop a Mobile App With Maui</strong></h2><p>There was a period early on in the C0V1D times where I <a href="https://www.devleader.ca/2020/03/29/downtime-time-to-build/">found myself with some downtime and wanted to learn</a>. I teamed up with a friend and we tried to <a href="https://www.devleader.ca/2024/01/12/build-a-blazor-web-app-series-get-in-the-know/">build a mobile app</a> together for fun using Xamarin (RIP). I purposefully chose different pieces of technology that I didn&#8217;t know so that I could learn about them, but I stuck with <a href="https://www.devleader.ca/2023/03/01/c-basics-a-guide-for-new-programmers/">C# as my programming language</a>. This allowed me to have some level of comfort as I went on to learn other things.</p><p>This may not be the same situation for you because C# is probably new to you &#8212; but that&#8217;s okay! Maybe Maui as a tech stack is new, and C# is also new&#8230; But you could make an app about something that you really love. Maybe you like cars, or sports, or video games&#8230; Make a simple app about those things so you can greatly simplify that part of the creative process. Focus your energy on the technical parts you&#8217;re trying to learn about.</p><p>Mobile app development can get difficult in some situations because of the need for specific platform knowledge. You may need to understand how to build native UI components, how to handle different device resolutions and sizes, and other situations. Maui aims to simplify a lot of this, but depending on what you&#8217;re building there could be some fun gotchas.</p><div><hr></div><h2><strong>3 &#8211; Create a CRUD Application</strong></h2><p>Many of the applications you&#8217;ll go on to build will need to use a database at some point. So instead of building an ENTIRE application that uses a database at one point, why not just focus on building a bit of code that can interact with a database?</p><p>Creating a CRUD application is a fundamental part of many applications and services, allowing you to Create, Read, Update, and Delete data stored in a database. Using .NET technologies like Entity Framework Core, you can build an application that efficiently interacts with a database &#8212; even if it&#8217;s just a console application that allows you to do these operations! I even started documenting how I was <a href="https://www.youtube.com/watch?v=LZjQJkDYQ8I&amp;ab_channel=DevLeader">building a Blazor app backed by Entity Framework Core</a>:</p><div id="youtube2-LZjQJkDYQ8I" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;LZjQJkDYQ8I&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/LZjQJkDYQ8I?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><p>To implement CRUD operations in C#, you can start by defining a model for your data object, such as a person or product. You could follow an entity framework tutorial to show you how to set up your connection to the database! See, not all tutorials are bad &#8211; Just have a use for them first. Once connected, you could have a console app that lets you perform the CRUD operations. You could build upon this by instead writing a REST API that calls into this same code!</p><p>&#8230; But that sounds like it might be part of the next section.</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/7-c-project-ideas-for-beginners-to?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Think a friend would benefit from these project ideas? Let them know!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/7-c-project-ideas-for-beginners-to?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/7-c-project-ideas-for-beginners-to?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><h2><strong>4 &#8211; Design a REST API</strong></h2><p>Creating a RESTful API is a great way to allow other applications to access your data or functionality. This involves designing endpoints that return or manipulate data depending on the HTTP method used. For example, a GET request could be used to retrieve data, while a POST request could be used to create new data. For our learning purposes, you really don&#8217;t need to design this for anyone else to use in practice &#8212; but you can try it out to prove it works!</p><p>And these days, it couldn&#8217;t be any easier to create a working <a href="https://www.devleader.ca/2024/01/12/build-a-blazor-web-app-series-get-in-the-know/">web app</a> with RESTful functionality in ASP.NET Core. Seriously! Check out <a href="https://www.youtube.com/watch?v=fyBhV9pWRg8">this video to see how to get minimal APIs working in under 5 minutes</a> (4 minutes and 19 seconds to be exact):</p><div id="youtube2-fyBhV9pWRg8" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;fyBhV9pWRg8&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/fyBhV9pWRg8?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><p>Here&#8217;s a bit of example code that shows how we could create a REST API for books &#8212; especially convenient if you worked on the CRUD example before this one using Entity Framework Core:</p><pre><code><code>using Microsoft.AspNetCore.Builder;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System.Linq;

var builder = WebApplication.CreateBuilder(args);

// Replace with your actual database configuration
builder.Services.AddDbContext&lt;BookContext&gt;(opt =&gt; 
    opt.UseInMemoryDatabase("Books"));
// Add services to the container.
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.MapGet("/books", async (BookContext context) =&gt;
    await context.Books.ToListAsync());

app.MapGet("/books/{id}", async (BookContext context, long id) =&gt;
{
    var book = await context.Books.FindAsync(id);
    return book != null ? Results.Ok(book) : Results.NotFound();
});

app.MapPost("/books", async (BookContext context, Book book) =&gt;
{
    context.Books.Add(book);
    await context.SaveChangesAsync();
    return Results.Created($"/books/{book.Id}", book);
});

app.MapPut("/books/{id}", async (BookContext context, long id, Book updatedBook) =&gt;
{
    var book = await context.Books.FindAsync(id);
    if (book == null) return Results.NotFound();

    book.Title = updatedBook.Title;
    book.Author = updatedBook.Author;
    book.Price = updatedBook.Price;

    await context.SaveChangesAsync();
    return Results.NoContent();
});

app.MapDelete("/books/{id}", async (BookContext context, long id) =&gt;
{
    var book = await context.Books.FindAsync(id);
    if (book == null) return Results.NotFound();

    context.Books.Remove(book);
    await context.SaveChangesAsync();
    return Results.NoContent();
});

app.Run();</code></code></pre><div><hr></div><h2><strong>5 &#8211; Build a Game</strong></h2><p>This one hits home for me because this is how I started. I&#8217;ll start by saying I am absolutely awful when it comes to creating anything graphical. It&#8217;s just not a thing I&#8217;ve ever been great with &#8212; so creating games was a bit scary. But the reality is, I was never interested in creating visually appealing games, I was fascinated by building out game mechanics.</p><p>If you poke around on my blog and even some of my early YouTube videos, you can see that I even used video game creation to try and get more comfortable with content creation &#8212; it&#8217;s because it&#8217;s something I know and have experience with. And that&#8217;s only because I used it as a way to <a href="https://www.devleader.ca/2023/08/21/balancing-learning-with-practical-application-in-programming-a-deep-dive/">practice and learn</a> about different ways to code, how to refactor, and how to integrate different technologies.</p><p>You can <a href="https://www.devleader.ca/2021/04/26/noesisgui-the-unity-ui-framework-that-you-probably-arent-using/">build games in Unity using C#</a> and you can <a href="https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_basics.html">build games in Godot with C#</a> as well. But my first games were completely text-based. You really don&#8217;t need to do anything fancy to make a basic game. If you find jumping into the game engines is too difficult right away, dial it back and try making a text-based game. You could build a console trivia game with multiple choice. You could build rock paper scissors. There are probably even some card games that could be done on the console!</p><p>In my opinion, writing games is an awesome way to learn about different algorithms. You get the opportunity to start thinking about how you&#8217;d translate logical rule sets into code!</p><div><hr></div><h2><strong>6 &#8211; Integrate with Third-Party Services</strong></h2><p>Integrating with third-party services is a powerful way to extend your .NET application&#8217;s capabilities beyond what your team can provide. This can include social media platforms or publicly accessible APIs. These APIs enable this integration, providing a defined interface for your application to interact with, and often they&#8217;re well-documented to tell you exactly how to use them.</p><p>I mentioned earlier in this article that I was using APIs for working with Azure&#8217;s OpenAI services &#8212; so that&#8217;s one such example. But you could search the internet to see if there are public data sources you could connect to maybe for weather information or something else.</p><p>One of the earlier <a href="https://www.devleader.ca/2023/08/17/building-projects-unlock-success-as-a-beginner-programmer/">projects was about building</a> a REST API, and this is going in the opposite direction! Maybe after you get some practice calling other third-party APIs you can go back and check the REST API you built. How could you improve it and refactor it?</p><div><hr></div><h2><strong>7 &#8211; Create a Full Website or App!</strong></h2><p>At this point, I&#8217;ve provided you with 6 C# project ideas for beginners that you could try to tackle. But what you may not have noticed is that each one of these could be a potential piece of a bigger application, and each of those pieces could come together in some form or another to build something more complex!</p><p>You could use your knowledge gained from building a simple CRUD app and building a REST API to get started with the basics for a back-end web server. From there, you could consider if you need to integrate with other third-party data to supplement what you have for what your web server can do.</p><p>You&#8217;ll want to decide if you go down the path of using something like Maui for building mobile applications, or perhaps <a href="https://www.devleader.ca/2023/10/17/how-to-make-a-budgeting-app-in-c-with-blazor/">something like Blazor for building the front-end to your website</a>. There are even Maui/Blazor hybrid options to explore!</p><p>The game concepts you may have learned if you tried out a project like that will help you think about what interesting algorithms you&#8217;ll want to provide in your service. And that first AI example with the chatbot? Now you&#8217;ll have some ideas for how you can even integrate something cool and shiny like AI into what you&#8217;re building!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">What do you think? Think that you can start any of these?!</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Wrapping Up C# Project Ideas For Beginners</strong></h2><p>The most important parts that you want to keep in mind when working on projects are:</p><ul><li><p>You&#8217;re learning new things</p></li><li><p>You feel engaged in what you&#8217;re learning</p></li><li><p>You&#8217;re having fun</p></li></ul><p>You&#8217;ll mess up along the way. You&#8217;re going to have to <a href="https://www.devleader.ca/2023/11/26/rewriting-vs-refactoring-code-how-to-navigate-the-two/">rewrite and refactor</a> code. Some code you write you&#8217;ll be embarrassed about even a week later. But every bit of that is helping you progress forward and learning how to write software. You need to put in the reps to get better, and this is how you do it! This is how you get out of tutorial hell!</p><p>If you enjoyed this article, <a href="https://www.devleader.ca/newsletter/">subscribe to Dev Leader Weekly for free</a> for more content like this to your inbox, and <a href="https://www.youtube.com/@devleader?sub_confirmation=1">check out my YouTube channel</a> to keep up to date. If you&#8217;re looking for additional help when it comes to getting started with C#, you can check out my course on Dometrain:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://dometrain.com/course/getting-started-csharp?affcode=1115529_nl-teyzg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp" width="705" height="397" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:397,&quot;width&quot;:705,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Getting Started: C# - Dometrain Course&quot;,&quot;title&quot;:&quot;Getting Started: C# - Dometrain Course - Dev Leader - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:&quot;https://dometrain.com/course/getting-started-csharp?affcode=1115529_nl-teyzg&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Getting Started: C# - Dometrain Course" title="Getting Started: C# - Dometrain Course - Dev Leader - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F32e95801-c59b-4eb5-b283-f05cd8f65a67_705x397.webp 1456w" sizes="100vw" loading="lazy"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://dometrain.com/course/getting-started-csharp?affcode=1115529_nl-teyzg">Get this course NOW</a>!</figcaption></figure></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/7-c-project-ideas-for-beginners-to/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/7-c-project-ideas-for-beginners-to/comments"><span>Leave a comment</span></a></p><div class="directMessage button" data-attrs="{&quot;userId&quot;:127921856,&quot;userName&quot;:&quot;Dev Leader&quot;,&quot;canDm&quot;:null,&quot;dmUpgradeOptions&quot;:null,&quot;isEditorNode&quot;:true}" data-component-name="DirectMessageToDOM"></div></li></ul>]]></content:encoded></item><item><title><![CDATA[ConstructorInfo – How To Make Reflection In DotNet Faster For Instantiation]]></title><description><![CDATA[Recently I wrote an article where I wanted to compare a popular way of creating object instances with DotNet reflection to another. In that article, I put Activator.CreateInstance head-to-head with Type.InvokeMember to see which had better performance. The result was Activator.CreateInstance in one specific case &#8212; but another champion would emerge: ConstructorInfo.]]></description><link>https://devleader.substack.com/p/constructorinfo-how-to-make-reflection</link><guid isPermaLink="true">https://devleader.substack.com/p/constructorinfo-how-to-make-reflection</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Mon, 25 Mar 2024 12:03:34 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/17/constructorinfo-how-to-make-reflection-in-dotnet-faster-for-instantiation/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:48654,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/17/constructorinfo-how-to-make-reflection-in-dotnet-faster-for-instantiation/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08dcbf85-7cd9-4b75-ab34-c106df1838e0_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/17/constructorinfo-how-to-make-reflection-in-dotnet-faster-for-instantiation/">The original article was posted on my website</a>!</figcaption></figure></div><p>Recently I wrote an article where I wanted to compare a popular way of creating object instances with DotNet reflection to another. In that article, I put <a href="https://www.devleader.ca/2024/03/14/activator-createinstance-vs-type-invokemember-a-clear-winner/">Activator.CreateInstance head-to-head with Type.InvokeMember</a> to see which had better performance. The result was Activator.CreateInstance in one specific case &#8212; but another champion would emerge: ConstructorInfo.</p><p>In this article, I&#8217;ll explain how you can get a ConstructorInfo reference using reflection in DotNet. I&#8217;ll also expand upon the benchmarks from the previous article, showing you the code and how the results turned out.</p><div><hr></div><h3><strong>Understanding ConstructorInfo From DotNet Reflection</strong></h3><p>In DotNet reflection, we get a powerful set of tools for inspecting assemblies, types, and members at runtime. One of the key components of this reflective capability is the <code>ConstructorInfo</code> class, which belongs to the System.Reflection namespace. This is where all of the goodies are &#8212; <a href="https://youtu.be/3Qstc-ND8Oo">Even the ones shown in this video that can be misused in the wrong hands</a>:</p><div id="youtube2-3Qstc-ND8Oo" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;3Qstc-ND8Oo&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/3Qstc-ND8Oo?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><p><code>ConstructorInfo</code> allows developers to obtain information about the constructors of a class, including their accessibility (public, private, etc.), parameters, and metadata. But one of the best parts, which we&#8217;ll be looking at in more detail, is that it enables the instantiation of objects dynamically at runtime without knowing their types at compile time.</p><p>And the best part? We&#8217;re going to see that when we compare it to <a href="https://www.devleader.ca/2024/03/14/activator-createinstance-vs-type-invokemember-a-clear-winner/">these other DotNet reflection mechanisms for making new instances</a>, it&#8217;s way faster.</p><div><hr></div><h2><strong>Finding Constructors with Reflection in DotNet &#8211; Getting ConstructorInfo</strong></h2><p>In this section, we&#8217;ll look at how we can first get <code>ConstructorInfo</code> instances so that we can leverage them later for object instantiation:</p><ol><li><p>Get the <code>ConstructorInfo</code> instances from types</p></li><li><p>Find the right constructor</p></li><li><p>&#8230;</p></li><li><p>Profit!</p></li></ol><p>Something like that, right? Let&#8217;s check these code examples out!</p><h3><strong>Get ConstructorInfo for All Public Constructors</strong></h3><p>To retrieve all public constructors of a class, you can use the <code>GetConstructors</code> method without any parameters by using a <code>Type</code> instance of a particular type. This method returns an array of <code>ConstructorInfo</code> objects representing each public constructor defined for the class.</p><p>Let&#8217;s see it in action in this code example:</p><pre><code><code>using System;
using System.Reflection;

public class SampleClass
{
    public SampleClass() { }
    public SampleClass(int i) { }
    protected SampleClass(string s) { }
    private SampleClass(int i, string s) { }
}

Type typeInfo = typeof(SampleClass);
ConstructorInfo[] publicConstructors = typeInfo.GetConstructors();

foreach (var constructor in publicConstructors)
{
    Console.WriteLine(constructor.ToString());
}</code></code></pre><p>When we&#8217;re thinking about dynamically invoking these things, it&#8217;s likely going to be the case that we don&#8217;t have the reference to the type though. But if we have the name of the type we&#8217;re interested in, we can use the following:</p><pre><code><code>Type typeOfInterest = Type.GetType("The.Namespace.Of.Your.Type.TheTypeName");</code></code></pre><h3><strong>Get ConstructorInfo Including Private and Protected Constructors</strong></h3><p>To get information about all constructors, regardless of their accessibility level, you can use the <code>GetConstructors</code> method with the <code>BindingFlags</code> parameter. This approach allows you to include non-public constructors in the results:</p><pre><code><code>ConstructorInfo[] allConstructors = typeInfo.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);

foreach (var constructor in allConstructors)
{
    Console.WriteLine(constructor.ToString());
}</code></code></pre><p>Keep in mind that if you watched the video I linked above, this starts to get into the territory of &#8220;Should I be doing this?&#8221;. Please strongly consider if you need to be accessing non-public things &#8212; Someone likely chose that access modifier for a reason.</p><h3><strong>Get ConstructorInfo Matching a Specific Signature</strong></h3><p>If you&#8217;re looking for constructors that match a specific parameter signature, you can use <code>GetConstructorInfo</code> (notice that it&#8217;s singular). This takes in binding flags like we saw before as well as an array of types that you want to match.</p><p>Here&#8217;s how you could find constructors that take a single <code>int</code> parameter:</p><pre><code><code>// Specify the parameter types of the 
// constructor you are looking for
Type[] paramTypes = new Type[] { typeof(int) };

// Use GetConstructor with the appropriate
// BindingFlags and parameter types
var constructor = typeInfo.GetConstructor(
    BindingFlags.Public | BindingFlags.Instance,
    paramTypes);

if (constructor != null)
{
    Console.WriteLine(constructor);
}
else
{
    Console.WriteLine("No matching constructor found!");
}</code></code></pre><p>Note that this method will return null when there&#8217;s no match, so ensure you got what you were looking for!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Creating Object Instances Using ConstructorInfo</strong></h2><p>Once we have a <code>ConstructorInfo</code> instance, we can start making object instances. This is what we&#8217;ll be benchmarking in the upcoming sections!</p><p>In these examples, assume that we already have a <code>ConstructorInfo</code> instance called constructorInfo. We&#8217;d be getting this instance in any of the ways documented earlier in the article:</p><pre><code><code>object instance = constructorInfo.Invoke(null);</code></code></pre><p>The code above shows instantiating an object with a parameterless constructor. We pass in null for the list of arguments that would need to be provided &#8212; because there are none. Take note that the type we get back is an <code>object</code>. If we have access to the type at compile, we could cast this instance to that type&#8230; But if we have access to the instance at compile time there are probably very few good reasons why you would be doing this in the first place. If you don&#8217;t believe me, wait until you see the benchmark results.</p><p>If we want to instantiate using a constructor that takes parameters it would look like the following:</p><pre><code><code>object instance = constructorInfo.Invoke(new object[] { 42 });</code></code></pre><p>This code example shows a constructor with a single integer parameter defined being invoked with 42 as the single integer argument.</p><div><hr></div><h2><strong>ConstructorInfo Performance Benchmarks</strong></h2><p>The moment you&#8217;ve all been waiting for! You might enjoy <a href="https://youtu.be/Djq7eMI_L-4">watching the video demonstrating these DotNet reflection benchmarks</a> here:</p><div id="youtube2-Djq7eMI_L-4" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;Djq7eMI_L-4&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/Djq7eMI_L-4?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><h3><strong>BenchmarkDotNet Setup for Reflection Performance</strong></h3><p>Much like the previous article, I&#8217;ve just added a couple of additional scenarios for the <code>ConstructorInfo</code> scenarios. I wanted to mention that I added TWO scenarios for each class, and that&#8217;s because I wanted to demonstrate the performance if you had to go instantiate AND find the <code>ConstructorInfo</code> back-to-back. I felt like this variation compared to already having the <code>ConstructorInfo</code> would be interesting to take note of.</p><p>Here is the full code, which you <a href="https://github.com/ncosentino/DevLeader/tree/master/ReflectionExamples/ReflectionExamples.ActivatorVsInvokeMemberBenchmarks">can also find on GitHub</a>:</p><pre><code><code>using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

using System.Reflection;

BenchmarkRunner.Run(Assembly.GetExecutingAssembly());
//BenchmarkSwitcher.FromAssembly(Assembly.GetExecutingAssembly()).RunAllJoined();

public class ParameterlessClass
{
}

public class ClassicStringParameterClass
{
    private readonly string _value;

    public ClassicStringParameterClass(string value)
    {
        _value = value;
    }
}

public class PrimaryConstructorStringParameterClass(
    string _value)
{
}

[ShortRunJob]
public class ParameterlessClassBenchmarks
{
    private Type? _type;
    private ConstructorInfo? _constructorInfo;

    [GlobalSetup]
    public void GlobalSetup()
    {
        _type = typeof(ParameterlessClass);
        _constructorInfo = _type.GetConstructor(Type.EmptyTypes);
    }

    [Benchmark]
    public void Constructor()
    {
        var instance = new ParameterlessClass();
    }

    [Benchmark(Baseline = true)]
    public void Activator_Create_Instance()
    {
        var instance = Activator.CreateInstance(_type!);
    }

    [Benchmark]
    public void Type_Invoke_Member()
    {
        var instance = _type!.InvokeMember(
            null,
            BindingFlags.CreateInstance,
            null,
            null,
            null);
    }

    [Benchmark]
    public void Constructor_Info_Invoke()
    {
        var instance = _constructorInfo!.Invoke(null);
    }

    [Benchmark]
    public void Find_Constructor_Info_Then_Invoke()
    {
        var constructorInfo = _type.GetConstructor(Type.EmptyTypes);
        var instance = constructorInfo!.Invoke(null);
    }
}

[ShortRunJob]
public class ClassicStringParameterClassBenchmarks
{
    private Type? _type;
    private ConstructorInfo? _constructorInfo;

    [GlobalSetup]
    public void GlobalSetup()
    {
        _type = typeof(ClassicStringParameterClass);
        _constructorInfo = _type.GetConstructor([typeof(string)]);
    }

    [Benchmark]
    public void Constructor()
    {
        var instance = new ClassicStringParameterClass("Hello World!");
    }

    [Benchmark(Baseline = true)]
    public void Activator_Create_Instance()
    {
        var instance = Activator.CreateInstance(
            _type!,
            new[]
            {
                "Hello World!",
            });
    }

    [Benchmark]
    public void Type_Invoke_Member()
    {
        var instance = _type!
            .InvokeMember(
                null,
                BindingFlags.CreateInstance,
                null,
                null,
                new[]
                {
                    "Hello World!",
                });
    }

    [Benchmark]
    public void Constructor_Info_Invoke()
    {
        var instance = _constructorInfo!.Invoke(new[]
        {
            "Hello World!",
        });
    }

    [Benchmark]
    public void Find_Constructor_Info_Then_Invoke()
    {
        var constructorInfo = _type.GetConstructor([typeof(string)]);
        var instance = constructorInfo!.Invoke(new[]
        {
            "Hello World!",
        });
    }
}

[ShortRunJob]
public class PrimaryConstructorStringParameterClassBenchmarks
{
    private Type? _type;
    private ConstructorInfo? _constructorInfo;

    [GlobalSetup]
    public void GlobalSetup()
    {
        _type = typeof(PrimaryConstructorStringParameterClass);
        _constructorInfo = _type.GetConstructor([typeof(string)]);
    }

    [Benchmark]
    public void Constructor()
    {
        var instance = new PrimaryConstructorStringParameterClass("Hello World!");
    }

    [Benchmark(Baseline = true)]
    public void Activator_Create_Instance()
    {
        var instance = Activator.CreateInstance(
            _type!,
            new[]
            {
                "Hello World!",
            });
    }

    [Benchmark]
    public void Type_Invoke_Member()
    {
        var instance = _type!
            .InvokeMember(
                null,
                BindingFlags.CreateInstance,
                null,
                null,
                new[]
                {
                    "Hello World!",
                });
    }

    [Benchmark]
    public void Constructor_Info_Invoke()
    {
        var instance = _constructorInfo!.Invoke(new[]
        {
            "Hello World!",
        });
    }

    [Benchmark]
    public void Find_Constructor_Info_Then_Invoke()
    {
        var constructorInfo = _type.GetConstructor([typeof(string)]);
        var instance = constructorInfo!.Invoke(new[]
        {
            "Hello World!",
        });
    }
}</code></code></pre><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><h2><strong>ConstructorInfo Benchmark Results from BenchmarkDotNet</strong></h2><p>The first set of results will be for the parameterless constructor:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp" width="1024" height="917" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:917,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for Parameterless Constructors&quot;,&quot;title&quot;:&quot;BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for Parameterless Constructors - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for Parameterless Constructors" title="BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for Parameterless Constructors - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F47df981d-0d6f-472d-ab40-c580cbf72758_1024x917.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>In the results above, we clearly already knew that without using reflection, we get the best speed. No brainer here. BenchmarkDotNet says it&#8217;s so fast it can&#8217;t even measure it properly. But we&#8217;ll notice that <code>Activator.CreateInstance</code> is technically a smidge faster here than using <code>ConstructorInfo</code>, even if we already had the instance ahead of time. The results are very close, and I have seen this swing the other way. So overall, these two are very comparable in this situation.</p><p>What happens if we need to use parameters though?</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp" width="1024" height="917" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:917,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for a Constructor with One Parameter&quot;,&quot;title&quot;:&quot;BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for a Constructor with One Parameter - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for a Constructor with One Parameter" title="BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for a Constructor with One Parameter - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F802c8895-7942-413c-b5c4-72946822ee20_1024x917.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>The BenchmarkDotNet results above show that a classic style constructor taking in a single string parameter, <code>ConstructorInfo</code> is an order of magnitude faster than the other DotNet reflection options. Even if we need to look up the instance first, it&#8217;s still almost twice as fast as the other options!</p><p>And of course, I wanted to see if primary constructors were any different in behavior:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp" width="1024" height="917" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:917,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for a Primary Constructor with One Parameter&quot;,&quot;title&quot;:&quot;BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for a Primary Constructor with One Parameter - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for a Primary Constructor with One Parameter" title="BenchmarkDotNet Results for DotNet Reflection - Comparing ConstructorInfo for a Primary Constructor with One Parameter - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2771ffc3-176f-442c-87d2-61d7660a6cf8_1024x917.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>Based on the results above though, they&#8217;re right on par!</p><div><hr></div><h2><strong>Wrapping Up ConstructorInfo and Reflection in DotNet</strong></h2><p>As we can see from the BenchmarkDotNet results, leveraging <code>ConstructorInfo</code> can be very performant! Only in the case where we&#8217;re dealing with a public parameterless constructor did it seem to be right on par with <code>Activator.CreateInstance</code>. Technically in this run it showed that it was a touch slower, but I&#8217;ve run these before and seen the opposite case too. Overall, you&#8217;ll want to consider if it makes sense for you to leverage this approach for creating object instances &#8212; but certainly don&#8217;t opt for reflection if you can easily just call <code>new()</code>!</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Remember to <a href="https://www.devleader.ca/discord-community-access/">head over to the Discord community</a> to chat with me and other like-minded software engineers!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/constructorinfo-how-to-make-reflection?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">If you enjoyed this, consider sharing it with others so they can see it too!</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/constructorinfo-how-to-make-reflection?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/constructorinfo-how-to-make-reflection?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="directMessage button" data-attrs="{&quot;userId&quot;:127921856,&quot;userName&quot;:&quot;Dev Leader&quot;,&quot;canDm&quot;:null,&quot;dmUpgradeOptions&quot;:null,&quot;isEditorNode&quot;:true}" data-component-name="DirectMessageToDOM"></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/constructorinfo-how-to-make-reflection/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/constructorinfo-how-to-make-reflection/comments"><span>Leave a comment</span></a></p></li></ul>]]></content:encoded></item><item><title><![CDATA[Activator.CreateInstance Vs Type.InvokeMember – A Clear Winner?]]></title><description><![CDATA[Reflection in dotnet is incredibly powerful &#8212; but with great power comes great responsibilities. Aside from all sorts of misuse that can arise with reflection, one of the reasons that dotnet reflection gets flack is because of performance. For that reason, I put this article together to talk about a comparison between two popular ways that you can create object instances. This will be]]></description><link>https://devleader.substack.com/p/activatorcreateinstance-vs-typeinvokemember</link><guid isPermaLink="true">https://devleader.substack.com/p/activatorcreateinstance-vs-typeinvokemember</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Thu, 21 Mar 2024 12:00:57 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/14/activator-createinstance-vs-type-invokemember-a-clear-winner/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:1232065,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/14/activator-createinstance-vs-type-invokemember-a-clear-winner/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c1b6373-4964-40a2-8247-f3ad7c9e3bb9_1920x1080.png 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/14/activator-createinstance-vs-type-invokemember-a-clear-winner/">This article was originally posted on my website</a>!</figcaption></figure></div><p>Reflection in dotnet is incredibly powerful &#8212; but with great power comes great responsibilities. Aside from all sorts of misuse that can arise with reflection, one of the reasons that dotnet reflection gets flack is because of performance. For that reason, I put this article together to talk about a comparison between two popular ways that you can create object instances. This will be <a href="https://www.devleader.ca/2024/03/14/activator-createinstance-vs-type-invokemember-a-clear-winner/">the battle of Activator.CreateInstance vs Type.InvokeMember</a>.</p><p>In this article, I&#8217;ll explain how you can use each to create new instances of types and I&#8217;ll also provide some benchmark details to explain who comes out on top. Of course, there&#8217;s going to be a little surprise. So, let&#8217;s dive into reflection in dotnet and compare Activator.CreateInstance vs Type.InvokeMember methods!</p><div><hr></div><h2><strong>Understanding Reflection in DotNet</strong></h2><p>DotNet Reflection is a powerful feature that allows you to inspect and manipulate your types at runtime. It provides the ability to dynamically load assemblies, examine and modify their metadata, and create instances of types that are not known at compile-time. I use this all of the time in my <a href="https://www.devleader.ca/2024/03/12/plugin-architecture-in-c-for-improved-software-design/">C# applications because I leverage plugin architectures all of the time</a>.</p><p>Reflection plays an important role in many advanced programming scenarios. It enables us to build flexible and extensible software solutions by providing the ability to perform operations on types, methods, properties, and fields that are not known at design-time. It&#8217;s also these powerful abilities that allow folks to use it for questionable reasons in their regular development &#8212; they hit a wall in their design but reflection allows them to walk right around it.</p><p>However, I feel that as a C# developer, it&#8217;s important to understand Reflection in DotNet because it opens up a whole new world of possibilities. With Reflection, you can build generic frameworks, implement dependency injection, create dynamic proxies, and much more. But these generally aren&#8217;t the core of what you&#8217;re building &#8212; they&#8217;re supporting pieces. That&#8217;s why they might be a good fit for it compared to the bulk of your business logic using reflection.</p><p>One of the key benefits of Reflection is its ability to dynamically create instances of types using either <code>Activator.CreateInstance</code> or <code>Type.InvokeMember</code>. These methods allow us to create objects without having knowledge of the concrete type at compile-time. In the following sections, we&#8217;ll explore these two methods of creating instances using Reflection as we compare <code>Activator.CreateInstance</code> vs <code>Type.InvokeMember</code>.</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Creating Instances Using Activator.CreateInstance</strong></h2><p>In C#, the <code>Activator.CreateInstance</code> method is one of the most popular ways that developers use to create instances via reflection. It allows the creation of new instances of classes at runtime, even without having knowledge of their specific types beforehand. This method belongs to the <code>System.Activator</code> class and is commonly used in scenarios where dynamic instantiation is required.</p><p>The primary purpose of <code>Activator.CreateInstance</code> is to dynamically create instances of classes &#8212; so if you have access to the type at compile time there&#8217;s probably not a good reason for you to be using this! <code>Activator.CreateInstance</code> can be particularly useful in situations where the type of object to create is not known until runtime, such as when loading plugins or working with dynamically loaded assemblies. It eliminates the need for hardcoding explicit constructors and provides flexibility in object creation.</p><h3><strong>Advantages and Disadvantages of using Activator.CreateInstance</strong></h3><p>Using <code>Activator.CreateInstance</code> offers several advantages over normal object instantiation:</p><ul><li><p>Allows for late-bound object creation, which can be beneficial in scenarios where object types can vary at runtime.</p></li><li><p>Can simplify the codebase by eliminating the need for switch statements or if-else conditions to handle different object types.</p></li><li><p>Provides a dynamic and extensible approach to object creation.</p></li></ul><p>However, there are also some disadvantages to consider when using <code>Activator.CreateInstance</code>:</p><ul><li><p>The performance overhead of using reflection can be higher compared to direct instantiation due to the additional steps involved in resolving types at runtime.</p></li><li><p><code>Activator.CreateInstance</code> <em><strong>generally</strong></em> relies on the existence of a public parameterless constructor. Otherwise, you need to consistently know which arguments to pass in &#8212; challenging if you&#8217;re dynamically doing this for many different types.</p></li><li><p>Prone to bugs when the target type is modified because there are no compile-time checks for signature compatibility.</p></li></ul><h3><strong>Code Examples of Using Activator.CreateInstance</strong></h3><p>The following code examples demonstrate how to use <code>Activator.CreateInstance</code> to create instances dynamically:</p><pre><code><code>// Example 1: Creating an instance of a known type
Type objectType = typeof(MyClass);
object instance = Activator.CreateInstance(objectType);</code></code></pre><p>In example 1, we use <code>typeof</code> to obtain the <code>Type</code> object representing the known class <code>MyClass</code>. Then, we use <code>Activator.CreateInstance</code> to create a new instance of <code>MyClass</code>.</p><pre><code><code>// Example 2: Creating an instance of an unknown type at runtime
string typeName = "MyNamespace.MyClass";
Type unknownType = Type.GetType(typeName);
object dynamicInstance = Activator.CreateInstance(unknownType);</code></code></pre><p>In example 2, we have an unknown type represented by a string <code>typeName</code>. We use <code>Type.GetType</code> to obtain the <code>Type</code> object based on the provided type name. Finally, <code>Activator.CreateInstance</code> is used to create a new instance of the dynamically determined type.</p><p>We&#8217;ll look at one more example where we can pass parameters in for the constructor &#8212; again, making the assumption that we&#8217;ll know the signature since we can&#8217;t prove it at compile time via this method:</p><pre><code><code>// Example 3: Creating an instance with constructor parameters:
string typeName = "MyNamespace.MyClass";
Type unknownType = Type.GetType(typeName);
Object dynamicInstance = Activator.CreateInstance(
    unknownType,
    new[]
    {
        "Hello World!", //  this is the single string parameter!
    });</code></code></pre><div><hr></div><h2><strong>Creating Instances Using Type.InvokeMember</strong></h2><p><code>Type.InvokeMember</code> is a method available to us from Reflection in DotNet that allows us to dynamically create instances of a type. It provides a flexible way to instantiate objects at runtime by utilizing the information about the type at hand. For these reasons, it&#8217;s very similar in terms of how you might go leverage it to create instances of objects.</p><h3><strong>Advantages and Disadvantages of using Type.InvokeMember</strong></h3><p>Here are some general advantages to using <code>Type.InvokeMember</code> over normal object instantiation:</p><ul><li><p>Allows for late-bound object creation, which can be beneficial in scenarios where object types can vary at runtime.</p></li><li><p>Can simplify the codebase by eliminating the need for switch statements or if-else conditions to handle different object types.</p></li><li><p>Provides a dynamic and extensible approach to object creation.</p></li></ul><p>Wait a second&#8230; Isn&#8217;t this the same list that we saw above for <code>Activator.CreateInstance</code>? That&#8217;s right. So let&#8217;s cut this part short. We&#8217;re not going to see any big difference until we start looking at performance &#8212; and perhaps in some very specific edge cases. But overall both provide very comprehensive ways to dynamically instantiate objects and InvokeMember is a bit more verbose since it handles more than just constructors.</p><p>Let&#8217;s check out some code before hitting the benchmarks.</p><h3><strong>Code Example of Using Type.InvokeMember</strong></h3><p>Here is an example code snippet demonstrating the usage of <code>Type.InvokeMember</code> to create an instance of a type dynamically:</p><pre><code><code>// Example 1: Creating an instance of a known type
Type objectType = typeof(MyClass);
var instance = objectType
.InvokeMember(
    null,
    BindingFlags.CreateInstance,
    null,
    null,
    null);</code></code></pre><p>In the above example, we first obtain the Type object representing the class &#8220;MyClass&#8221;. We then use Type.InvokeMember to create an instance of that class and assign it to the &#8220;instance&#8221; variable. This allows us to create an object of &#8220;MyClass&#8221; dynamically without explicitly specifying the class name.</p><p>And to do this without knowing the class at compile-time, it&#8217;s very much like before. This part has nothing to do with InvokeMember though:</p><pre><code><code>// Example 2: Creating an instance of an unknown type at runtime
string typeName = "MyNamespace.MyClass";
Type unknownType = Type.GetType(typeName);
var instance = objectType.InvokeMember(
    null,
    BindingFlags.CreateInstance,
    null,
    null,
    null);</code></code></pre><p>And finally, if we need to pass in some constructor parameters then we can do that as well:</p><pre><code><code>// Example 3: Creating an instance with constructor parameters:
string typeName = "MyNamespace.MyClass";
Type unknownType = Type.GetType(typeName);
var instance = objectType.InvokeMember(
    null,
    BindingFlags.CreateInstance,
    null,
    null,
    new[]
    {
        "Hello World!",
    });</code></code></pre><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Benchmarking Activator.CreateInstance vs Type.InvokeMember</strong></h2><p>Alright &#8212; onto the juicy stuff. We&#8217;re going to look at <a href="https://www.devleader.ca/2024/03/05/how-to-use-benchmarkdotnet-simple-performance-boosting-tips-to-get-started/">benchmarking these different approaches</a> to see if aside from API usage we come up with anything different between the two. If you don&#8217;t have much experience using BenchmarkDotNet and want to see more, <a href="https://youtu.be/Hqeq9ycqteQ">you can check out this video on how to use BenchmarkDotNet</a>:</p><div id="youtube2-Hqeq9ycqteQ" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;Hqeq9ycqteQ&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/Hqeq9ycqteQ?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><h3><strong>BenchmarkDotNet Setup for Reflection Performance</strong></h3><p>I figured I&#8217;d come up with three situations we could run benchmarks against using BenchmarkDotNet:</p><ul><li><p>Parameterless constructor class</p></li><li><p>Constructor with a single string parameter</p></li><li><p>Primary constructor with a single string parameter</p></li></ul><p>I wanted to toss in primary constructors because I know that&#8217;s a feature getting a lot of people up in arms &#8212; might as well get some data on it! Here are the classes we&#8217;ll be instantiating, for reference:</p><pre><code><code>public class ParameterlessClass
{
}

public class ClassicStringParameterClass
{
    private readonly string _value;

    public ClassicStringParameterClass(string value)
    {
        _value = value;
    }
}

public class PrimaryConstructorStringParameterClass(
    string _value)
{
}
</code></code></pre><p>As for benchmarks, let&#8217;s check out the following classes that we&#8217;ll be running. Keep in mind that I am using <code>Activator.CreateInstance</code> as the baseline because I want to compare <code>Activator.CreateInstance</code> vs <code>Type.InvokeMember</code> &#8212; I am only including the normal constructor pathway just as a reference. You can <a href="https://github.com/ncosentino/DevLeader/tree/master/ReflectionExamples/ReflectionExamples.ActivatorVsInvokeMemberBenchmarks">find all of this code on GitHub as well</a>:</p><pre><code><code>[ShortRunJob]
public class ParameterlessClassBenchmarks
{
    private Type? _type;

    [GlobalSetup]
    public void GlobalSetup()
    {
        _type = typeof(ParameterlessClass);
    }

    [Benchmark]
    public void Constructor()
    {
        var instance = new ParameterlessClass();
    }

    [Benchmark(Baseline = true)]
    public void Activator_Create_Instance()
    {
        var instance = Activator.CreateInstance(_type!);
    }

    [Benchmark]
    public void Type_Invoke_Member()
    {
        var instance = _type!.InvokeMember(
            null,
            BindingFlags.CreateInstance,
            null,
            null,
            null);
    }
}

[ShortRunJob]
public class ClassicStringParameterClassBenchmarks
{
    private Type? _type;

    [GlobalSetup]
    public void GlobalSetup()
    {
        _type = typeof(ClassicStringParameterClass);
    }

    [Benchmark]
    public void Constructor()
    {
        var instance = new ClassicStringParameterClass("Hello World!");
    }

    [Benchmark(Baseline = true)]
    public void Activator_Create_Instance()
    {
        var instance = Activator.CreateInstance(
            _type!,
            new[]
            {
                "Hello World!",
            });
    }

    [Benchmark]
    public void Type_Invoke_Member()
    {
        var instance = _type!
            .InvokeMember(
                null,
                BindingFlags.CreateInstance,
                null,
                null,
                new[]
                {
                    "Hello World!",
                });
    }
}

[ShortRunJob]
public class PrimaryConstructorStringParameterClassBenchmarks
{
    private Type? _type;

    [GlobalSetup]
    public void GlobalSetup()
    {
        _type = typeof(PrimaryConstructorStringParameterClass);

    }

    [Benchmark]
    public void Constructor()
    {
        var instance = new PrimaryConstructorStringParameterClass("Hello World!");
    }

    [Benchmark(Baseline = true)]
    public void Activator_Create_Instance()
    {
        var instance = Activator.CreateInstance(
            _type!,
            new[]
            {
                "Hello World!",
            });
    }

    [Benchmark]
    public void Type_Invoke_Member()
    {
        var instance = _type!
            .InvokeMember(
                null,
                BindingFlags.CreateInstance,
                null,
                null,
                new[]
                {
                    "Hello World!",
                });
    }
}</code></code></pre><h3><strong>Activator.CreateInstance vs Type.InvokeMember: Who is the Champion?!</strong></h3><p>When we pit these two Reflection methods head to head, the winner is&#8230; situational. In one of the most common cases, I&#8217;d say there&#8217;s a very clear winner but for the others, they&#8217;re very close. But make sure you read the conclusion because this isn&#8217;t the end of the story.</p><p>The first benchmark we&#8217;re going to look at is for a parameterless constructor:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp" width="1024" height="562" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:562,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Parameterless Constructors&quot;,&quot;title&quot;:&quot;Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Parameterless Constructors - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Parameterless Constructors" title="Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Parameterless Constructors - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1b646f92-cbcb-42c0-b1af-eb27c6745b3f_1024x562.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>Clear winner here: <code>Activator.CreateInstance</code>, almost by an order of magnitude. If you don&#8217;t have any parameters on your constructor, your best bet is this one.</p><p>Next, let&#8217;s check out <code>Activator.CreateInstance</code> vs <code>Type.InvokeMember</code> for a constructor taking in a single string parameter:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp" width="1024" height="562" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:562,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Classic Constructors With Parameters&quot;,&quot;title&quot;:&quot;Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Classic Constructors With Parameters - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Classic Constructors With Parameters" title="Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Classic Constructors With Parameters - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7a58684f-7b2a-4570-90bd-65cbc9f44a73_1024x562.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>The winner? Not so obvious. These are basically neck-and-neck here, and even though <code>Activator.CreateInstance</code> comes out a smidge ahead, it&#8217;s nearly negligible.</p><p>The last scenario to look at is going to be for primary constructors, and in this case, a primary constructor that takes in a single string parameter:</p><div class="captioned-image-container"><figure><a class="image-link is-viewable-img image2" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp" width="1024" height="562" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:562,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Primary Constructors\n&quot;,&quot;title&quot;:&quot;Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Primary Constructors - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Primary Constructors
" title="Activator.CreateInstance vs Type.InvokeMember - Benchmarks For Primary Constructors - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22cf033a-e00a-4179-93fb-53bcdc16e942_1024x562.webp 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2 "><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></a></figure></div><p>The winner: <code>Type.InvokeMember</code>, but only by a little bit. Very interesting that this is the reverse of what we saw in the previous benchmark!</p><div><hr></div><h2><strong>Wrapping Up Activator.CreateInstance vs Type.InvokeMember</strong></h2><p>When it comes to the performance results of <code>Activator.CreateInstance</code> vs <code>Type.InvokeMember</code>, there&#8217;s a clear winner for the parameterless constructor case: <code>Activator.CreateInstance</code>. But when we get into requiring parameters or using primary constructors with parameters, it starts to even out or even favor <code>Type.InvokeMember</code>.</p><p>But this is only the FIRST part of the picture&#8230; There&#8217;s one more scenario we&#8217;ll look at that is the *true* winner, which you can <a href="https://www.devleader.ca/2024/03/17/constructorinfo-how-to-make-reflection-in-dotnet-faster-for-instantiation/">read all about in this article here</a>. It continues with these examples and provides updated benchmarks for you as well.</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Remember to <a href="https://www.devleader.ca/discord-community-access/">head over to the Discord community</a> to chat with me and other like-minded software engineers!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="directMessage button" data-attrs="{&quot;userId&quot;:127921856,&quot;userName&quot;:&quot;Dev Leader&quot;,&quot;canDm&quot;:null,&quot;dmUpgradeOptions&quot;:null,&quot;isEditorNode&quot;:true}" data-component-name="DirectMessageToDOM"></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/activatorcreateinstance-vs-typeinvokemember/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/activatorcreateinstance-vs-typeinvokemember/comments"><span>Leave a comment</span></a></p></li></ul>]]></content:encoded></item><item><title><![CDATA[Async Event Handlers In C#: What You Need To Know]]></title><description><![CDATA[Events and event handlers aren&#8217;t necessarily the most common language feature being used if you&#8217;re focused on web development in ASP.NET Core&#8230; but if you&#8217;re building applications in WinForms, WPF, Maui &#8212; or anything with a user interface really &#8212; it&#8217;s almost guaranteed you&#8217;ll be using these. Given how pervasive async await code is now, that also suggests you&#8217;re probably going to run into]]></description><link>https://devleader.substack.com/p/async-event-handlers-in-c-what-you</link><guid isPermaLink="true">https://devleader.substack.com/p/async-event-handlers-in-c-what-you</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Wed, 20 Mar 2024 12:02:41 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:985550,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa950aa94-f71d-4c81-b8a0-c9b1552c79b6_1920x1080.png 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/">This article was originally posted on my website</a>!</figcaption></figure></div><p>Events and event handlers aren&#8217;t necessarily the most common language feature being used if you&#8217;re focused on web development in ASP.NET Core&#8230; but if you&#8217;re building applications in WinForms, WPF, Maui &#8212; or anything with a user interface really &#8212; it&#8217;s almost guaranteed you&#8217;ll be using these. Given how pervasive async await code is now, that also suggests you&#8217;re probably going to run into <a href="https://www.devleader.ca/2024/03/13/async-event-handlers-in-c-what-you-need-to-know/">async event handlers in C#</a> at some point too.</p><p>Async event handlers have their challenges. They&#8217;re essentially two things that conceptually fit nicely together, but the language features of C# break down for us right where these two things intersect. In this article, I&#8217;ll explain why there are risks, what those risks are, and what you can try and do to make things better.</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Understanding Async Event Handlers in C#</strong></h2><p>Async event handlers in C# allow you to handle asynchronous events that occur during the execution of a program. These events can include user input, network requests, or any other asynchronous operations. These methods are marked with the <code>async</code> keyword, indicating that they contain asynchronous operations, and therefore we can await other calls within them. When an event is triggered, the async event handler is invoked and runs concurrently with the rest of the program.</p><p>A traditional synchronous event handler in C# has the following syntax:</p><pre><code><code>void MyEventHandler(object sender, EventArgs e)
{
    // TODO: handle the event
}</code></code></pre><p>But if we need one to run asynchronously, it will look like this:</p><pre><code><code>async void MyEventHandler(object sender, EventArgs e)
{
    // TODO: handle the event, running the asynchronous code we can await on
}</code></code></pre><p>Keeping in mind that event handlers in C# *must* have a <a href="https://www.devleader.ca/2023/01/27/async-void-how-to-tame-the-asynchronous-nightmare/">void return type, what kind of problem do we have here</a>?</p><h2><strong>What Makes Async Event Handlers in C# Dangerous?</strong></h2><p>While async event handlers offer great flexibility and improved responsiveness, they also introduce a set of potential dangers and risks that you need to be aware of. And I don&#8217;t blame you if either you weren&#8217;t aware of these or you were aware but weren&#8217;t sure the best way to navigate these issues&#8230; because it&#8217;s a very awkward intersection of event handler syntax and <a href="https://www.devleader.ca/2024/02/27/async-await-in-c-3-beginner-tips-you-need-to-know/">async await</a> code.</p><p>Fundamentally, issues arise because of the <code>async void</code> declaration of the event handler. <a href="https://www.devleader.ca/2024/03/07/async-void-methods-in-c-the-dangers-that-you-need-to-know/">When we start using async await, we&#8217;re told early on that using async void is a big no-no</a>.</p><p>And why is that? It eliminates the possibility for us to await the asynchronous operation &#8212; that&#8217;s what Task allows us to do. When we&#8217;re unable to leverage a task to await, we lose the ability to manage the execution of the task, including exception handling.</p><p>That means if your event handler goes boom, then your app is going to go boom somewhere else. And you won&#8217;t be able to gracefully deal with it.</p><h2><strong>Key Risks With Async Event Handlers in C#</strong></h2><p>Now that you understand what makes them dangerous in general, here are a few key risks associated with async event handlers in C#:</p><ol><li><p>Unobserved exceptions: When an async event handler encounters an exception during its execution, it can cause an unhandled exception if the error is not properly handled. This can lead to unexpected program behavior or even crashes. It&#8217;s important to handle exceptions appropriately to prevent these issues. This was the focus of the previous section.</p></li><li><p>Concurrency concerns: Async event handlers run concurrently with the rest of the program, making it important to consider potential concurrency issues. Concurrent access to shared resources can lead to race conditions, data corruption, or inconsistent state. When we&#8217;re doing <a href="https://www.devleader.ca/2024/02/27/async-await-in-c-3-beginner-tips-you-need-to-know/">async await</a>, sure, we are dealing with concurrency&#8230; But now we just have an async body of code running off potentially into outer space that we can&#8217;t align with.</p></li></ol><p>And of course, <a href="https://www.devleader.ca/2024/02/14/weak-events-in-c-how-to-avoid-nasty-memory-leaks/">the async flavor of event handlers in C# carries the same potential memory-leak issue</a>. We&#8217;ll skip the details here but just remember to unhook events when you&#8217;re done requiring the registration and properly manage your event and event handler lifetimes!</p><div><hr></div><h2><strong>Handling Async Event Handlers Safely in C#</strong></h2><p>Async event handlers in C# can introduce some potential issues if not handled properly. I&#8217;ve tried <a href="https://www.devleader.ca/2023/01/27/async-void-how-to-tame-the-asynchronous-nightmare/">coming up with alternative solutions in the past to async void</a> code as well as <a href="https://www.devleader.ca/2023/02/14/async-eventhandlers-a-simple-safety-net-to-the-rescue/">helpers that could clean up the syntax when trying to write safe event handlers</a>. Ultimately, these are either incredibly complex or in the simple case the syntax just feels a bit off. This section will detail some general simple strategies you can employ to make these less of a headache &#8212; but the responsibility is still on you to add them!</p><h3><strong>Wrap Async Event Handlers with Try/Catch</strong></h3><p>If we accept that we&#8217;re stuck using <code>async void</code> for event handlers, the biggest concern for us to address is catching exceptions. Once an exception bubbles up and hits that <a href="https://www.devleader.ca/2023/01/27/async-void-how-to-tame-the-asynchronous-nightmare/">async void</a> boundary, it&#8217;s game over. There&#8217;s not going to be an elegant way for your application to handle that. The current call stack will be unable to properly catch this even if you wrapped the event invocation in a try/catch.</p><p>To mitigate this risk, use a <code>try-catch</code> block at the top level of your event handler. Make it the first and last thing that your event handler does so there&#8217;s no way for code to throw exceptions without being wrapped with a catch block:</p><pre><code><code>async Task MyEventHandler(object sender, EventArgs e)
{
    try
    {
        // TODO: do the async code
    }
    catch (Exception)
    {
        // Handle cancellation
    }
}</code></code></pre><p>This still sucks because it&#8217;s manual, but maybe someone could make a Roslyn analyzer to enforce this?! Also, notice that I&#8217;m catching *all* exceptions here&#8230; But what are we expecting to do about it? Truly, unless we&#8217;re ready for our application to crash or experience weird behavior, we need to stop exceptions from bubbling out of an async void method. Maybe logging or telemetry? But not a lot of great options by default.</p><h3><strong>Force Timeout on Async Event Handlers</strong></h3><p>Here&#8217;s a not-so-silver-bullet option you could add to the mix for working with async event handlers. Sometimes, async operations within an event handler can take longer to complete than expected. Recall that we can&#8217;t easily manage this <a href="https://www.devleader.ca/2024/02/27/async-await-in-c-3-beginner-tips-you-need-to-know/">async void call because we can&#8217;t await</a> it and we don&#8217;t have a task object to work with. But if we could do *something* to help keep these from running away with resources in some sort of infinite loop, we could introduce a cancellation token timed with some maximum allowable time.</p><p>See the example below which includes the suggestion from the previous section:</p><pre><code><code>async void MyEventHandler(object sender, EventArgs e)
{
    using (var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5)))
    {
        try
        {
            // Continue with async operation, pass in cancel token
        }
        catch (OperationCanceledException)
        {
            // Handle cancellation
        }
        catch (Exception ex)
        {
            // TODO: how should we handle these?
        }
    }
}</code></code></pre><p>In the code above, we simply try to limit execution to no longer than 5 seconds. As long as the async code we implement within here takes advantage of the cancellation token, then they should be able to handle canceling properly. But that does mean that *someone* still needs to carry that responsibility.</p><div><hr></div><h2><strong>Wrapping Up Async Event Handlers in C#</strong></h2><p>In summary, understanding and safely managing async event handlers in C# is important for C# developers. Async event handlers have their own set of dangers and complexities that need to be addressed to ensure the stability and efficiency of software applications.</p><p>These can be challenging to be aware of in the first place, but even once you&#8217;re aware&#8230; what&#8217;s the best way to solve them? Hopefully from this article you understand why these are challenging and some strategies to help.</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! Sign up for my Discord community to chat with me and other like-minded software engineers!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/async-event-handlers-in-c-what-you?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thank you for reading Dev Leader Articles. This post is public so feel free to share it.</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/async-event-handlers-in-c-what-you?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/async-event-handlers-in-c-what-you?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="directMessage button" data-attrs="{&quot;userId&quot;:127921856,&quot;userName&quot;:&quot;Dev Leader&quot;,&quot;canDm&quot;:null,&quot;dmUpgradeOptions&quot;:null,&quot;isEditorNode&quot;:true}" data-component-name="DirectMessageToDOM"></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/async-event-handlers-in-c-what-you/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/async-event-handlers-in-c-what-you/comments"><span>Leave a comment</span></a></p></li></ul>]]></content:encoded></item><item><title><![CDATA[Plugin Architecture in C# for Improved Software Design]]></title><description><![CDATA[My obsession with creating applications based on plugin architectures probably stems from my history of playing role-playing games. These games generally required systems that could have mechanics extended via plugins or new content that could be added to the game via plugins. Since much of my experience early on when learning C# as a kid was making games, a]]></description><link>https://devleader.substack.com/p/plugin-architecture-in-c-for-improved</link><guid isPermaLink="true">https://devleader.substack.com/p/plugin-architecture-in-c-for-improved</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Tue, 19 Mar 2024 12:01:35 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/12/plugin-architecture-in-c-for-improved-software-design/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:96274,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/12/plugin-architecture-in-c-for-improved-software-design/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0a4c5487-d1c4-4357-82bc-52d9bc2d8ec4_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/12/plugin-architecture-in-c-for-improved-software-design/">This article was originally posted on my website</a>!</figcaption></figure></div><p>My obsession with creating applications based on plugin architectures probably stems from my history of playing role-playing games. These games generally required systems that could have mechanics extended via plugins or new content that could be added to the game via plugins. Since much of my experience early on when learning C# as a kid was making games, a <a href="https://www.devleader.ca/2024/03/12/plugin-architecture-in-c-for-improved-software-design/">plugin architecture in C# applications</a> easily became something I learned about regularly.</p><p>In this article, I&#8217;ll introduce you to the concept of plugin architectures and specifically look at plugin architecture in C# as well as how we can explore loading plugin information. We&#8217;ll also look at some high-level examples of situations where plugins would be valuable &#8212; but implementing these in greater detail is an exercise you can do for homework! Let&#8217;s dive into it!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Understanding Plugin Architecture</strong></h2><p>So what exactly is a plugin architecture with respect to how software is built? A <a href="https://www.devleader.ca/2023/09/07/plugin-architecture-design-pattern-a-beginners-guide-to-modularity/">plugin architecture is a design pattern</a> that allows you to extend the functionality of an existing application by dynamically loading and executing external modules or plugins. These plugins can be developed separately and added to the application without modifying the core codebase. That means we can add new functionality and never even need to rebuild the code of the original core application!</p><p><a href="https://www.devleader.ca/2023/09/26/blazor-renderfragment-how-to-use-plugins-to-generate-html/">Using a plugin architecture in C# applications</a> provides several benefits and some of them include:</p><ol><li><p>Modularity: With a plugin architecture, different components of an application can be developed separately as plugins. This modularity allows you to focus on specific functionalities without impacting the overall structure of the application. It also enables easier maintenance and updates, as plugins can be added or replaced independently.</p></li><li><p>Flexibility: By using a plugin architecture, you can easily introduce new features or functionalities to an application without modifying the core code. This flexibility allows for rapid development and iteration, as new plugins can be created and integrated with less effort than modifying core shared code.</p></li><li><p>Code Reusability: Plugins can be developed as reusable components that can be used across multiple projects or applications. This reusability not only saves development time but also promotes code consistency and reduces the chances of introducing bugs.</p></li><li><p>Customization: Plugin architectures allow users or clients to customize and extend the functionality of an application based on their specific needs. This customization can be achieved by simply adding or removing plugins without requiring changes to the core codebase.</p></li></ol><p>Overall, <a href="https://www.devleader.ca/2023/07/31/plugin-architecture-in-asp-net-core-how-to-master-it/">plugin architectures</a> in C# are something that I use heavily in my development to provide a modular and flexible approach to building software. <a href="https://youtu.be/5OKLiQM2y30">Check out this video for how I use plugin systems</a> in my <a href="https://www.devleader.ca/2023/12/07/exploring-an-example-vertical-slice-architecture-in-asp-net-core-what-you-need-to-know/">application based on vertical slices</a>:</p><div id="youtube2-5OKLiQM2y30" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;5OKLiQM2y30&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/5OKLiQM2y30?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div><hr></div><h2><strong>Loading Plugins in C#</strong></h2><p>In C#, there are various approaches and techniques for loading plugins into your software solution. Loading plugins can provide enhanced functionality and flexibility to your application. Let&#8217;s explore some of these approaches and techniques with code examples. For the following examples, assume we have an IPlugin interface that simply maps to the following code:</p><pre><code><code>public IPlugin
{
    void Execute();
}</code></code></pre><h3><strong>Dynamic Assembly Loading with Reflection in CSharp</strong></h3><p>One approach for <a href="https://www.devleader.ca/2023/09/15/blazor-plugin-architecture-how-to-manage-dynamic-loading-lifecycle/">loading plugins in C# is by dynamically</a> loading assemblies. This allows you to load external DLL files at runtime, which can contain the necessary code for your plugins. Here&#8217;s an example of how you can achieve this:</p><pre><code><code>// Get the path to the plugin DLL
string pluginPath = "path/to/plugin.dll";

// Load the plugin assembly
Assembly assembly = Assembly.LoadFrom(pluginPath);

// Instantiate the plugin types
IEnumerable&lt;Type&gt; pluginTypes = assembly
    .GetTypes()
    .Where(t =&gt; typeof(IPlugin).IsAssignableFrom(t) &amp;&amp; !t.IsAbstract);

// Create instances of the plugins
List&lt;IPlugin&gt; plugins = new();
foreach (Type pluginType in pluginTypes)
{
    IPlugin plugin = (IPlugin)Activator.CreateInstance(pluginType);
    plugins.Add(plugin);
}

// Use the plugins
foreach (IPlugin plugin in plugins)
{
    plugin.Execute();
}</code></code></pre><p>In the above code, we first <a href="https://www.devleader.ca/2023/09/15/blazor-plugin-architecture-how-to-manage-dynamic-loading-lifecycle/">load the plugin</a> assembly using <code>Assembly.LoadFrom</code>. We then use reflection to find all types that implement the <code>IPlugin</code> interface and are not abstract. We <a href="https://www.devleader.ca/2024/02/26/reflection-in-c-4-code-simple-but-powerful-code-examples/">create instances of these plugin types using reflection</a> &#8212; <a href="https://www.devleader.ca/2024/02/28/activator-createinstance-in-c-a-quick-rundown/">specifically, using </a><code>Activator.CreateInstance</code> &#8212; and store them in a list. Finally, we can use the plugins by calling their <code>Execute</code> method.</p><h3><strong>Autofac for Dynamically Loading C# Plugins</strong></h3><p>One of my favorite <a href="https://www.devleader.ca/2024/02/25/using-autofac-in-csharp-3-simple-tips-for-beginnners/">dependency injection frameworks in C# is Autofac</a>. We can use Autofac to scan a directory for assemblies that contain types implementing the <code>IPlugin</code> interface and register them. Here&#8217;s an example of how to set up Autofac in C# for this purpose:</p><pre><code><code>using Autofac;
using System.Reflection;

public class PluginLoader
{
    public IContainer LoadPlugins(string pluginsPath)
    {
        var builder = new ContainerBuilder();

        // Scan the plugins directory for assemblies
        // and register types that implement IPlugin
        var types = Directory
            .GetFiles(pluginsPath, "*.dll")
            .Select(Assembly.LoadFrom)
            .ToArray();
        builder
            .RegisterAssemblyTypes(types)
            .AssignableTo&lt;IPlugin&gt;()
            .As&lt;IPlugin&gt;();

        return builder.Build();
    }
}</code></code></pre><p><a href="https://www.devleader.ca/2023/09/15/blazor-plugin-architecture-how-to-manage-dynamic-loading-lifecycle/">The above code will ask use reflection to get the types from the assemblies in the plugins directory</a>. In this case, it will be trying to load any file with a DLL extension from that folder location. From there, we&#8217;re able to ask Autofac to register those types, but we use the <code>AssignableTo&lt;T&gt;()</code> method to filter the types to only be of IPlugin. Finally, we indicate that they can be resolved as IPlugin instances using the <code>As&lt;T&gt;()</code> method.</p><p>The following code example builds the container, registers all of the plugins, and then mimics the behavior in the previous code example where we call <code>Execute()</code> on each plugin:</p><pre><code><code>// Assuming the plugins are located in a 'plugins' folder in the application directory
var pluginFolder = Path.Combine(
    Directory.GetCurrentDirectory(),
    "plugins");
var pluginLoader = new PluginLoader();
var container = pluginLoader.LoadPlugins(pluginFolder);

// Resolve all implementations of IPlugin and execute them
foreach (var plugin in container.Resolve&lt;IEnumerable&lt;IPlugin&gt;&gt;())
{
    plugin.Execute();
}

</code></code></pre><p>I&#8217;ve made <a href="https://youtu.be/-pxwL_VD4Uo">video tutorials as well on how you can leverage Autofac for loading plugins</a>:</p><div id="youtube2--pxwL_VD4Uo" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;-pxwL_VD4Uo&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/-pxwL_VD4Uo?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div><hr></div><h2><strong>Examples of Practical Plugin Architectures in C#</strong></h2><p>Now that we&#8217;ve seen how we could go about implementing how to load plugins, it&#8217;s time to look at some examples of possible plugin architectures in C# applications. In these examples, we won&#8217;t be going through building out a full-on application, but we can go into some high-level details of the use case, what a sample plugin API might look like, and why plugins could be useful.</p><h3><strong>Dynamic Data Visualization Plugins</strong></h3><p><a href="https://www.devleader.ca/2023/09/26/blazor-renderfragment-how-to-use-plugins-to-generate-html/">One interesting use case of plugin architecture in C# is for dynamic data visualization</a>. This can be particularly useful when working with large datasets or real-time data streams. By creating a plugin system, you can develop separate visualization modules that can be <a href="https://www.devleader.ca/2023/09/15/blazor-plugin-architecture-how-to-manage-dynamic-loading-lifecycle/">dynamically loaded and unloaded</a> at runtime, depending on the type and format of the data. Instead of <a href="https://www.devleader.ca/2023/10/15/how-to-build-a-personal-website-in-blazor-an-asp-net-core-tutorial/">building the core</a> of an application around a visualization or two, we could instead treat them as plugins to allow more rich visualizations to be added in later as the application evolves.</p><p>Here&#8217;s some example code that we could consider:</p><pre><code><code>// Interface for the visualization plugin
public interface IVisualizationPlugin : IDisposable
{
    void Initialize();

    void RenderData(
        DataSet data,
        IVisualizationContext context);
}

// Example plugin implementation
public class BarChartPlugin : IVisualizationPlugin
{
    public void Initialize()
    {
        // Initialize the bar chart visualization
    }

    public void RenderData(
        DataSet data,
        IVisualizationContext context)
    {
        // Render the bar chart with the provided data
    }

    public void Dispose()
    {
        // Cleanup resources used by the bar chart
    }
}</code></code></pre><p>In this example, we might want to have some optional entry points for plugins to get things set up. This would be our <code>Initialize()</code> method. We mark each as IDisposable so that we can ensure that each plugin has a proper opportunity to clean up resources when we&#8217;re ready to unload them. The <code>RenderData</code> method is where the magic happens, and each plugin would be able to take the incoming data set and a context object for visualization. This context object is contrived, and of course, would be heavily application dependent, but it could be something that allows the plugin to add a UI control into it or a surface that the plugin can paint the visualization onto directly.</p><h3><strong>Extension-Based Plugins for File Processing</strong></h3><p>Another example of a possible plugin architecture in C# is for extending file processing capabilities. Imagine you have a file-processing application that supports various file formats, such as images, documents, and videos. By implementing a plugin system, you can allow users to develop and load custom file format handlers dynamically.</p><p>In the code below, we&#8217;ll see a plugin format that allows us to check if the plugin can support the file extension. You could imagine that <a href="https://www.devleader.ca/2024/03/08/the-facade-design-pattern-in-c-how-to-simplify-complex-subsystems/">we have something like a facade class that would iterate through each plugin</a> to see which supports it, and call the relevant plugin to handle it:</p><pre><code><code>// Interface for the file format plugin
public interface IFileFormatPlugin
{
    bool CanHandleFile(string filePath);

    void ProcessFile(string filePath);
}

// Example plugin implementation
public class PDFPlugin : IFileFormatPlugin
{
    public bool CanHandleFile(string filePath)
    {
        return filePath.EndsWith("pdf", StringComparison.OrdinalIgnoreCase);
    }

    public void ProcessFile(string filePath)
    {
        // Perform PDF-specific file processing
    }
}</code></code></pre><h3><strong>Custom Rule Engine Plugins</strong></h3><p>A plugin architecture can also be beneficial when implementing a custom rule engine for applications that require complex validation or business rules. By using plugins, you can break down the rule engine into separate modules and dynamically load and execute them based on specific conditions or triggers.</p><p>In the code example below, we use a TryX pattern that commonly has a boolean return type and an out parameter to get a result. In this case, we can output an Exception instance when the rule evaluation is not met. An alternative way to do this could be <a href="https://www.devleader.ca/2023/05/31/implicit-operators-in-c-and-how-to-create-a-multi-type/">using a custom multi-type to have your own return type that could be the result or an error</a>, or using the OneOf NuGet package. Let&#8217;s check it out:</p><pre><code><code>// Interface for the rule plugin
public interface IRulePlugin
{
    string RuleName { get; }

    bool TryEvaluateRule(
        object target,
        out Exception error);
}

// Example plugin implementation
public class AgeValidationPlugin : IRulePlugin
{
    public string RuleName { get; } = "AgeValidation";

    public bool TryEvaluateRule(
        object target,
        out Exception error)
    {
        // Check if the target object meets the age validation criteria
    }
}</code></code></pre><h3><strong>Plugin-based Authentication Systems</strong></h3><p><a href="https://www.devleader.ca/2023/09/14/plugin-architecture-in-blazor-a-how-to-guide/">A plugin architecture</a> can also be applied to authentication systems, allowing the integration of various authentication providers such as OAuth, Active Directory, or custom authentication mechanisms. By creating authentication plugins, you can enable flexibility and easily switch between different authentication methods without tightly coupling your application to a specific implementation.</p><p>Here&#8217;s a highly simplified plugin API that demonstrates the goal, but anyone who&#8217;s worked with real authentication systems likely realizes this is very trivialized:</p><pre><code><code>// Interface for the authentication plugin
public interface IAuthenticationPlugin
{
    bool AuthenticateUser(string username, string password);
}

// Example plugin implementation
public class OAuthPlugin : IAuthenticationPlugin
{
    public bool AuthenticateUser(string username, string password)
    {
        // Authenticate the user using OAuth protocol
    }
}</code></code></pre><p>While this example might be a little bit light, the point is calling out the use case &#8212; authentication in applications can be a great thing to move into plugins. If you are developing something that may require different authentication integrations, leveraging plugins to interface with each and still provide authentication for your app would be a great opportunity.</p><h3><strong>Social Media Metrics Platform</strong></h3><p>A very relevant example of a plugin architecture in C# is for tracking social media metrics. <a href="https://www.devleader.ca/2024/01/13/take-control-of-career-progression-dev-leader-weekly-26/">In my newsletter, I was sharing behind the scenes details on how this was being built</a> and created a video series which you can watch on YouTube detailing the entire step-by-step process for making the app. You can see the <a href="https://youtu.be/qndnxPzjrow">start of the Blazor build series in this video</a>, which focuses on a plugin architecture in C#:</p><div id="youtube2-qndnxPzjrow" class="youtube-wrap" data-attrs="{&quot;videoId&quot;:&quot;qndnxPzjrow&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><div class="youtube-inner"><iframe src="https://www.youtube-nocookie.com/embed/qndnxPzjrow?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></div></div><div><hr></div><h2><strong>Wrapping Up Plugin Architecture in C#</strong></h2><p><a href="https://www.devleader.ca/2023/09/07/plugin-architecture-design-pattern-a-beginners-guide-to-modularity/">Using a plugin architecture in C# development is one of my go-to ways to design systems</a>. I admit that I have a strong bias for them! For me, when I am building applications on my own, they align with how I like to think about being able to extend software. Because I am used to structuring code to be <a href="https://www.devleader.ca/2023/09/15/blazor-plugin-architecture-how-to-manage-dynamic-loading-lifecycle/">loaded dynamically via plugin</a> systems, this shapes a lot of my design. However, like all things, there are pros and cons and often it doesn&#8217;t make sense to complicate trivial applications with plugins &#8212; especially if there are features that are not planned to be extended.</p><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>! If you&#8217;d like to discuss your software design with me and other software engineers, <a href="https://www.devleader.ca/discord-community-access/">join the Discord community</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/plugin-architecture-in-c-for-improved?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thank you for reading Dev Leader Articles. This post is public so feel free to share it.</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/plugin-architecture-in-c-for-improved?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/plugin-architecture-in-c-for-improved?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/plugin-architecture-in-c-for-improved/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/plugin-architecture-in-c-for-improved/comments"><span>Leave a comment</span></a></p><div class="directMessage button" data-attrs="{&quot;userId&quot;:127921856,&quot;userName&quot;:&quot;Dev Leader&quot;,&quot;canDm&quot;:null,&quot;dmUpgradeOptions&quot;:null,&quot;isEditorNode&quot;:true}" data-component-name="DirectMessageToDOM"></div></li></ul>]]></content:encoded></item><item><title><![CDATA[How To Automatically Cast Between Types In C#]]></title><description><![CDATA[To automatically cast between types in C#, we need to look at something called implicit operators in C#. In particular, we&#8217;ll need to define what are static implicit operators. By defining these on our types, we can instruct the compiler how to convert between types without the need to write explicit casting in our code.]]></description><link>https://devleader.substack.com/p/how-to-automatically-cast-between</link><guid isPermaLink="true">https://devleader.substack.com/p/how-to-automatically-cast-between</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Mon, 18 Mar 2024 12:01:44 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/11/how-to-automatically-cast-between-types-in-c/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:720,&quot;width&quot;:1280,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:82976,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/11/how-to-automatically-cast-between-types-in-c/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac94a402-d1cf-4ce0-b72b-5a29b788d29f_1280x720.webp 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/11/how-to-automatically-cast-between-types-in-c/">This article was originally posted on my website</a>!</figcaption></figure></div><p>To automatically cast between types in C#, we need to look at something called implicit operators in C#. In particular, we&#8217;ll need to define what are <code>static implicit operator</code>s. By defining these on our types, we can instruct the compiler how to convert between types without the need to write explicit casting in our code.</p><p>This article will give you a quick code example of how to implement them using a practical scenario. Check it out, and let me know if you have any questions!</p><div><hr></div><h2><strong>What are Implicit Operators in C#?</strong></h2><p>Implicit operators in C# are a <a href="https://www.devleader.ca/2024/01/25/composite-pattern-in-c-for-powerful-object-structures/">powerful feature that allows objects</a> of one type to be automatically converted to another type without the need for an explicit cast. They provide a way to seamlessly convert between types, making code more concise and readable.</p><p>Implicit operators are defined as special methods within a class or struct, using the <code>implicit</code> keyword. These methods specify the <a href="https://www.devleader.ca/2024/03/04/implicit-operators-in-c-how-to-simplify-type-conversions/">conversion from one type</a> to another. When the compiler encounters an assignment or expression involving compatible types, it will automatically invoke the appropriate <a href="https://www.devleader.ca/2023/05/31/implicit-operators-in-c-and-how-to-create-a-multi-type/">implicit operator</a> to perform the conversion.</p><h2><strong>Code Example: Automatically Cast Between Types in C#</strong></h2><p>In this example, we&#8217;re going to walk through binary capacity! As software engineers, we&#8217;re always having to convert between bytes, kilobytes, megabytes, and beyond. While this is relatively straightforward, the fact that it&#8217;s not exactly a decimal conversion (i.e. multiply/divide by 1000) but instead a factor of 1024 introduces a bit of cognitive overhead.</p><p>Let&#8217;s start with our first type for megabytes:</p><pre><code><code>public struct Megabytes
{
    public double Value { get; }

    public Megabytes(double value)
    {
        Value = value;
    }

    // Implicitly converts Megabytes to Gigabytes
    public static implicit operator Gigabytes(Megabytes megabytes)
    {
        return new Gigabytes(megabytes.Value / 1024);
    }
}</code></code></pre><p>As you can see in the code example above, we&#8217;ll need to consider the next type for gigabytes:</p><pre><code><code>public struct Gigabytes
{
    public double Value { get; }

    public Gigabytes(double value)
    {
        Value = value;
    }

    // Implicitly converts Gigabytes to Megabytes
    public static implicit operator Megabytes(Gigabytes gigabytes)
    {
        return new Megabytes(gigabytes.Value * 1024);
    }
}</code></code></pre><p>These two types are very similar, but they provide logic for converting one way or the other via the <code>static implicit operator</code>. This is what makes the magic happen for us. Now let&#8217;s look at how we can use these:</p><pre><code><code>// Implicitly convert Megabytes to Gigabytes
Megabytes storage = new Megabytes(2048); // 2 GB in megabytes
Gigabytes gigabytes = storage; // Implicit conversion to Gigabytes

Console.WriteLine(gigabytes.Value); // Output: 2

// Implicitly convert Gigabytes back to Megabytes
Megabytes megabytes = gigabytes; // Implicit conversion back to Megabytes
Console.WriteLine(megabytes.Value); // Output: 2048</code></code></pre><p>In this code snippet, we can directly assign Gigabytes to Megabytes because of the <a href="https://www.devleader.ca/2023/05/31/implicit-operators-in-c-and-how-to-create-a-multi-type/">implicit operator</a>. The underlying value is scaled accordingly, and that way when we go to use either of them we get the correct numeric value backing it!</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>Wrapping Up How To Automatically Cast Between Types in C#</strong></h2><p>To conclude, being able to automatically cast between types in C# is accomplished by introducing a <code>static implicit operator</code>. In this article, we got to see a simple use case for working with conversions between size of of binary data. If you&#8217;d like to see more examples, you can check out:</p><ul><li><p>This <a href="https://github.com/ncosentino/DevLeader/tree/master/OperatorExamples/OperatorExamples.ImplicitOperators">project on my DevLeader GitHub</a>. There are plenty of other interesting examples in the repository to check through too!</p></li><li><p><a href="https://www.devleader.ca/2024/03/04/implicit-operators-in-c-how-to-simplify-type-conversions/">This article on a deeper dive for implicit operators</a>.</p></li><li><p><a href="https://www.devleader.ca/2023/05/31/implicit-operators-in-c-and-how-to-create-a-multi-type/">This article for using implicit operators on custom multi-type types</a></p></li><li><p><a href="https://www.devleader.ca/2023/08/04/implicit-operators-clean-code-secrets-or-buggy-nightmare/">This overview article on implicit operators in C#</a></p></li></ul><p>If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/how-to-automatically-cast-between?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thank you for reading Dev Leader Articles. This post is public so feel free to share it.</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/how-to-automatically-cast-between?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/how-to-automatically-cast-between?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="directMessage button" data-attrs="{&quot;userId&quot;:127921856,&quot;userName&quot;:&quot;Dev Leader&quot;,&quot;canDm&quot;:null,&quot;dmUpgradeOptions&quot;:null,&quot;isEditorNode&quot;:true}" data-component-name="DirectMessageToDOM"></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/how-to-automatically-cast-between/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/how-to-automatically-cast-between/comments"><span>Leave a comment</span></a></p></li></ul>]]></content:encoded></item><item><title><![CDATA[The Facade Design Pattern in C#: How to Simplify Complex Subsystems]]></title><description><![CDATA[The facade design pattern is one of my favorites. Out of all of the design patterns that are out there, I have found that it&#8217;s the one I turn to repeatedly across different applications. In this article, I&#8217;ll be exploring the facade design pattern in C# &#8212; because all of the code examples will be in C#! We&#8217;ll be looking at 4 different examples of the facade pattern in C# and how each of them is used to simplify things for the caller of our API.]]></description><link>https://devleader.substack.com/p/the-facade-design-pattern-in-c-how</link><guid isPermaLink="true">https://devleader.substack.com/p/the-facade-design-pattern-in-c-how</guid><dc:creator><![CDATA[Dev Leader]]></dc:creator><pubDate>Sun, 17 Mar 2024 12:00:33 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://www.devleader.ca/2024/03/08/the-facade-design-pattern-in-c-how-to-simplify-complex-subsystems/" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:1065106,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://www.devleader.ca/2024/03/08/the-facade-design-pattern-in-c-how-to-simplify-complex-subsystems/&quot;,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" class="sizing-large" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb03d9620-a465-46dd-aa1d-4192e552f099_1920x1080.png 1456w" sizes="100vw" fetchpriority="high"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://www.devleader.ca/2024/03/08/the-facade-design-pattern-in-c-how-to-simplify-complex-subsystems/">This article was originally posted on my website</a>!</figcaption></figure></div><p><a href="https://www.devleader.ca/2024/03/08/the-facade-design-pattern-in-c-how-to-simplify-complex-subsystems/">The facade design pattern</a> is one of my favorites. Out of <a href="https://www.devleader.ca/2023/12/31/the-big-list-of-design-patterns-everything-you-need-to-know/">all of the design patterns that are out there</a>, I have found that it&#8217;s the one I turn to repeatedly across different applications. In this article, I&#8217;ll be exploring the facade design pattern in C# &#8212; because all of the code examples will be in C#! We&#8217;ll be looking at 4 different examples of the facade pattern in C# and how each of them is used to simplify things for the caller of our API.</p><div><hr></div><h2><strong>What is the Facade Design Pattern?</strong></h2><p>The Facade pattern is a software design pattern that falls under the category of structural design patterns. It provides a simplified interface for a complex subsystem, making it easier to use and understand. The main purpose of the Facade pattern is to hide the complexities of the subsystem and provide a unified interface to the clients, shielding them from the details of how the subsystem works.</p><p>The Facade pattern is particularly useful when working with large and complex systems, where there are multiple classes and interactions involved. By using the Facade <a href="https://www.devleader.ca/2023/12/31/the-big-list-of-design-patterns-everything-you-need-to-know/">design pattern</a>, you can encapsulate the underlying complexities into a single high-level interface, making it easier to interact with the system.</p><p>The key characteristics of the Facade pattern include:</p><ol><li><p><strong>Encapsulation</strong>: The Facade class encapsulates the interactions and complexities of the underlying subsystem, providing a simplified interface for clients to interact with.</p></li><li><p><strong>Simplification</strong>: The Facade design pattern simplifies the overall usage of the system by providing a concise and easy-to-understand interface, reducing the cognitive load for developers.</p></li><li><p><strong>Abstraction</strong>: The Facade class abstracts the complexities of the subsystem, allowing clients to interact with the system without needing to know the internal details.</p></li></ol><p>By utilizing the Facade pattern, you can create a well-defined boundary between the client code and the complex subsystem, leading to improved maintainability, flexibility, and reusability of the codebase.</p><div class="subscription-widget-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading Dev Leader Articles! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><div><hr></div><h2><strong>A Generic Example of the Facade Design Pattern in C#:</strong></h2><p>Here is an example of how the Facade pattern can be implemented in C#:</p><pre><code><code>// Complex subsystem classes
class SubsystemA
{
    public void MethodA()
    {
        Console.WriteLine("Subsystem A - Method A");
    }
}

class SubsystemB
{
    public void MethodB()
    {
        Console.WriteLine("Subsystem B - Method B");
    }
}

class SubsystemC
{
    public void MethodC()
    {
        Console.WriteLine("Subsystem C - Method C");
    }
}

// Facade class
class Facade
{
    private SubsystemA subsystemA;
    private SubsystemB subsystemB;
    private SubsystemC subsystemC;

    public Facade()
    {
        subsystemA = new SubsystemA();
        subsystemB = new SubsystemB();
        subsystemC = new SubsystemC();
    }

    public void Operation()
    {
        Console.WriteLine("Facade - Operation");
        subsystemA.MethodA();
        subsystemB.MethodB();
        subsystemC.MethodC();
    }
}

// Client code
class Client
{
    static void Main(string[] args)
    {
        Facade facade = new Facade();
        facade.Operation();
    }
}</code></code></pre><p>In this code example, we have a complex subsystem consisting of three classes: <code>SubsystemA</code>, <code>SubsystemB</code>, and <code>SubsystemC</code>. These classes represent different functionalities or components of the subsystem. The <code>Facade</code> class acts as a simplified interface that encapsulates the complexities of the subsystem. The <code>Operation</code> method in the <code>Facade</code> class provides a unified interface for the clients to interact with the subsystem.</p><p>By calling the <code>Operation</code> method on the <code>Facade</code> object, the client code can perform the desired actions without needing to directly interact with the complex subsystem classes. The <code>Facade</code> class internally communicates with the individual subsystem classes, hiding the intricate details from the client.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://products.devleader.ca/l/uwxyp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png" width="300" height="300" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:300,&quot;width&quot;:300,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Design Patterns 1.0 EBook - Square&quot;,&quot;title&quot;:&quot;Design Patterns 1.0 EBook - Square - Dev Leader - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:&quot;https://products.devleader.ca/l/uwxyp&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Design Patterns 1.0 EBook - Square" title="Design Patterns 1.0 EBook - Square - Dev Leader - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 1456w" sizes="100vw" loading="lazy"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://products.devleader.ca/l/uwxyp">Click to get your E-Book copy NOW</a>!</figcaption></figure></div><div><hr></div><h2><strong>Plugin Architectures in C# with the Facade Pattern</strong></h2><p><a href="https://www.devleader.ca/2023/09/07/plugin-architecture-design-pattern-a-beginners-guide-to-modularity/">In a plugin-style architecture</a>, the Facade design pattern can be particularly useful for abstracting the complexities of dynamically selecting and interacting with various plugins based on runtime conditions or configurations. Let&#8217;s consider a document processing system where the system needs to support different formats (e.g., PDF, DOCX, ODT) and operations (e.g., parsing, rendering) through plugins. Each format is handled by a different plugin, but clients interact with a unified interface provided by the facade.</p><h3><strong>Complex Subsystems &#8211; Plugins!</strong></h3><p>We have plugins for handling various document formats:</p><ul><li><p><code>PdfPlugin</code>: Handles PDF document operations.</p></li><li><p><code>DocxPlugin</code>: Handles DOCX document operations.</p></li><li><p><code>OdtPlugin</code>: Handles ODT document operations.</p></li></ul><p>Each plugin implements a common interface, <code>IDocumentPlugin</code>, which defines methods for whether or not the document is supported and rendering documents. We&#8217;ll be using an imaginary <code>IRenderContext</code> interface that would support interactions for being able to render the document content to some virtual canvas &#8212; outside of the scope of this example &#128578;</p><h3><strong>The IDocumentPlugin Interface</strong></h3><p>Let&#8217;s check out the example code for a plugin interface that each of our implementations will have:</p><pre><code><code>public interface IDocumentPlugin
{
    bool SupportsFormat(string filePath);

    void RenderDocument(Stream stream, IRenderContext renderContext);
}</code></code></pre><p>And some dummy classes for now to meet the three plugins we&#8217;re required to support:</p><pre><code><code>public class PdfPlugin : IDocumentPlugin
{
    public bool SupportsFormat(string filePath) =&gt; filePath.EndsWith(
        "pdf",
        StringComparison.OrdinalIgnoreCase);

    public void RenderDocument(
        Stream stream,
        IRenderContext renderContext) =&gt; Console.WriteLine("Rendering PDF document...");
}

public class DocxPlugin : IDocumentPlugin
{
    public bool SupportsFormat(string filePath) =&gt; filePath.EndsWith(
        "docx",
        StringComparison.OrdinalIgnoreCase);

    public void RenderDocument(
        Stream stream,
        IRenderContext renderContext) =&gt; Console.WriteLine("Rendering DOCX document...");
}

public class OdtPlugin : IDocumentPlugin
{
    public bool SupportsFormat(string filePath) =&gt; filePath.EndsWith(
        "odt",
        StringComparison.OrdinalIgnoreCase);

    public void RenderDocument(
        Stream stream,
        IRenderContext renderContext) =&gt; Console.WriteLine("Rendering ODT document...");
}</code></code></pre><h3><strong>The Document Processing Facade Class</strong></h3><p>The <code>DocumentProcessorFacade</code> class provides a simplified interface to interact with the appropriate plugin based on the document format, hiding the complexity of plugin selection and operation execution:</p><pre><code><code>public class DocumentProcessorFacade
{
    private readonly List&lt;IDocumentPlugin&gt; _plugins;

    public DocumentProcessorFacade()
    {
        // NOTE: I would probably use dependency injection to
        // pass in viable plugins, but this is just to
        // demonstrate the example
        _plugins = new List&lt;IDocumentPlugin&gt;
        {
            new PdfPlugin(),
            new DocxPlugin(),
            new OdtPlugin()
        };
    }

    public void ProcessDocument(
        string filePath,
        IRenderContext renderContext)
    {
        var plugin = GetSupportedPlugin(format);
        if (plugin == null)
        {

            throw new NotSupportedException(
                $"No plugin found to support format for file '{filePath}'.");
        }

        using var fileStream = File.OpenRead(filePath);
        plugin.RenderDocument(stream, renderContext);
    }

    private IDocumentPlugin GetPluginForFormat(string filePath)
    {
        return _plugins.FirstOrDefault(p =&gt; p.SupportsFormat(filePath));
    }
 }</code></code></pre><p>This example demonstrates how the Facade pattern simplifies interactions within a plugin-style architecture by providing a unified interface (<code>DocumentProcessorFacade</code>) to various document processing plugins. The facade handles the complexity of selecting the appropriate plugin based on the document format and executing operations, allowing client code to remain simple and clean. This approach enhances modularity, scalability, and maintainability of the software system.</p><div><hr></div><h2><strong>Streamlining API Calls using the Facade Design Pattern</strong></h2><p>Managing multiple API calls in an application can be a complex task. As a software engineer, it is important to find ways to simplify and streamline this process. One effective approach is to utilize the Facade <a href="https://www.devleader.ca/2023/12/31/the-big-list-of-design-patterns-everything-you-need-to-know/">design pattern</a>, which provides a convenient interface to a set of interfaces in a subsystem. In this section, we&#8217;ll explore how the Facade pattern can be utilized to streamline and centralize API call management in C#.</p><p>When working with multiple APIs, it is common to encounter challenges such as handling authentication, managing request/response formats, and dealing with rate limiting. These tasks can become time-consuming and error-prone if not properly managed. The Facade pattern can help alleviate these challenges by providing a unified and simplified interface for interacting with the APIs.</p><p>By implementing a facade class, we can encapsulate the complexity of making API calls behind a simple and easy-to-use interface. This allows other parts of the codebase to interact with the APIs without having to worry about the details of authentication, request/response formats, or rate limiting. Let&#8217;s take a look at an example to see how this can be achieved:</p><pre><code><code>public class ApiFacade
{
    private readonly ApiAuthenticationService _authenticationService;
    private readonly ApiRequestFormatter _requestFormatter;
    private readonly ApiRateLimiter _rateLimiter;

    public ApiFacade()
    {
        _authenticationService = new ApiAuthenticationService();
        _requestFormatter = new ApiRequestFormatter();
        _rateLimiter = new ApiRateLimiter();
    }

    public ApiResponse MakeApiCall(ApiRequest request)
    {
        _authenticationService.Authenticate();
        var formattedRequest = _requestFormatter.Format(request);
        _rateLimiter.WaitIfNeeded();

        // Make the actual API call and retrieve the response
        var response = ApiClient.MakeCall(formattedRequest);

        return response;
    }
}</code></code></pre><p>In the code example above, we have created an <code>ApiFacade</code> class that encapsulates the complexity of authentication, request formatting, and rate limiting. It utilizes three separate services: <code>ApiAuthenticationService</code>, <code>ApiRequestFormatter</code>, and <code>ApiRateLimiter</code>. By utilizing the facade pattern, we can centralize the management of these services and expose a single method (<code>MakeApiCall</code>) that takes care of all the necessary steps to make an API call.</p><p>To use the <code>ApiFacade</code> class, other parts of the codebase can simply create an instance and call the <code>MakeApiCall</code> method, passing in the required <code>ApiRequest</code>. The facade class will handle the authentication, request formatting, rate limiting, and the actual API call, simplifying the overall process and reducing the complexity of managing multiple API calls.</p><div><hr></div><h2><strong>Enhancing UIs with the Facade Design Pattern in C#</strong></h2><p>User interface interactions can often become complex and involve a series of intricate steps. The Facade pattern provides an elegant solution to simplify and optimize these interactions, making them more manageable and efficient. Let&#8217;s explore how the Facade pattern can enhance user interface interactions in C# with a code example.</p><p>Consider a scenario where a user needs to perform various actions on a customer management system, such as creating a new customer, updating their information, and retrieving customer details. Each of these actions involves interacting with multiple components and performing a series of steps.</p><p>By utilizing the Facade <a href="https://www.devleader.ca/2023/12/31/the-big-list-of-design-patterns-everything-you-need-to-know/">design pattern</a>, we can create a unified interface that encapsulates the complexity of these interactions. The Facade class acts as a simplified entry point, shielding the client from the underlying system&#8217;s complexities and providing a more straightforward API for interacting with the user interface.</p><pre><code><code>public class CustomerManagementFacade
{
    private readonly CustomerService _customerService;
    private readonly CustomerValidationService _validationService;
    private readonly CustomerCacheService _cacheService;

    public CustomerManagementFacade()
    {
        _customerService = new CustomerService();
        _validationService = new CustomerValidationService();
        _cacheService = new CustomerCacheService();
    }

    public void CreateNewCustomer(string name, string email)
    {
        if (_validationService.ValidateCustomerData(name, email))
        {
            _customerService.CreateCustomer(name, email);
            _cacheService.CacheCustomer(name, email);
        }
    }

    public void UpdateCustomerInformation(string name, string email)
    {
        if (_validationService.ValidateCustomerData(name, email))
        {
            _customerService.UpdateCustomer(name, email);
            _cacheService.UpdateCachedCustomer(name, email);
        }
    }

    public Customer GetCustomerDetails(string name)
    {
        var customer = _cacheService.GetCachedCustomer(name);

        if (customer == null)
        {
            customer = _customerService.GetCustomer(name);
            _cacheService.CacheCustomer(customer.Name, customer.Email);
        }

        return customer;
    }
}</code></code></pre><p>In the above code example, we have a <code>CustomerManagementFacade</code> class that acts as the fa&#231;ade for managing customer interactions. It encapsulates the creation, updating, and retrieval of customer information. The fa&#231;ade orchestrates the interaction between the <code>CustomerService</code>, <code>CustomerValidationService</code>, and <code>CustomerCacheService</code> to provide simpler methods for the client to use.</p><p>With the fa&#231;ade pattern, the client code only needs to interact with the fa&#231;ade class and doesn&#8217;t need to worry about the detailed interactions with each individual component. This simplifies the codebase, reduces complexity, and allows for easier maintenance and extensibility.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" href="https://products.devleader.ca/l/uwxyp" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png" width="300" height="300" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:300,&quot;width&quot;:300,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Design Patterns 1.0 EBook - Square&quot;,&quot;title&quot;:&quot;Design Patterns 1.0 EBook - Square - Dev Leader - Dev Leader&quot;,&quot;type&quot;:null,&quot;href&quot;:&quot;https://products.devleader.ca/l/uwxyp&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" class="sizing-normal" alt="Design Patterns 1.0 EBook - Square" title="Design Patterns 1.0 EBook - Square - Dev Leader - Dev Leader" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc75bcae-c50a-4cfe-85d6-c93c8af00387_300x300.png 1456w" sizes="100vw" loading="lazy"></picture><div></div></div></a><figcaption class="image-caption"><a href="https://products.devleader.ca/l/uwxyp">Click to get your E-Book copy NOW</a>!</figcaption></figure></div><div><hr></div><h2><strong>Wrapping Up The Facade Design Pattern in C#</strong></h2><p>In conclusion, we have explored the Facade design pattern in C# and discussed 4 interesting use cases along with code examples. The Facade pattern provides a simplified interface to a complex subsystem, making it easier to understand and use. Each of these examples hopefully helped to illustrate different scenarios where leveraging a facade can make things much simpler for the calling code.</p><p>Understanding and utilizing <a href="https://www.devleader.ca/2023/12/31/the-big-list-of-design-patterns-everything-you-need-to-know/">design patterns, such as the Facade pattern</a>, is important for software engineers. These patterns provide proven solutions to common software engineering problems and offer a structured approach to designing robust and scalable applications. By incorporating design patterns into our development practices, we can create software solutions that are more efficient, flexible, and easier to maintain &#8212; but <a href="https://www.devleader.ca/2023/12/31/the-big-list-of-design-patterns-everything-you-need-to-know/">understanding which design patterns best fit where takes some practice</a>!</p><p>Try out the Facade pattern further and consider implementing it in your C# projects &#8212; it&#8217;s truly one of my favorite design patterns to work with. If you found this useful and you&#8217;re looking for more learning opportunities, consider <a href="https://subscribe.devleader.ca/">subscribing to my free weekly software engineering newsletter</a> and check out my <a href="https://www.youtube.com/@devleader?sub_confirmation=1">free videos on YouTube</a>!</p><div class="captioned-button-wrap" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/the-facade-design-pattern-in-c-how?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><div class="preamble"><p class="cta-caption">Thank you for reading Dev Leader Articles. This post is public so feel free to share it.</p></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/the-facade-design-pattern-in-c-how?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/the-facade-design-pattern-in-c-how?utm_source=substack&utm_medium=email&utm_content=share&action=share"><span>Share</span></a></p></div><div><hr></div><h1><strong>Want More Dev Leader Content?</strong></h1><ul><li><p>Follow along on this platform if you haven&#8217;t already!</p></li><li><p>Subscribe to my free weekly software engineering and dotnet-focused newsletter. I include exclusive articles and early access to videos:<br><strong><a href="https://subscribe.devleader.ca/">SUBSCRIBE FOR FREE</a></strong></p></li><li><p>Looking for courses? Check out my offerings:<br><strong><a href="https://devleader.ca/courses">VIEW COURSES</a></strong></p></li><li><p>E-Books &amp; other resources:<br><strong><a href="https://products.devleader.ca/">VIEW RESOURCES</a></strong></p></li><li><p>Watch hundreds of full-length videos on my YouTube channel:<br><strong><a href="https://youtube.com/@devleader?sub_confirmation=1">VISIT CHANNEL</a></strong></p></li><li><p>Visit my website for hundreds of articles on various software engineering topics (including code snippets):<br><strong><a href="https://devleader.ca/">VISIT WEBSITE</a></strong></p></li><li><p>Check out the repository with many code examples from my articles and videos on GitHub:<br><strong><a href="https://github.com/ncosentino/DevLeader">VIEW REPOSITORY</a></strong></p><div class="directMessage button" data-attrs="{&quot;userId&quot;:127921856,&quot;userName&quot;:&quot;Dev Leader&quot;,&quot;canDm&quot;:null,&quot;dmUpgradeOptions&quot;:null,&quot;isEditorNode&quot;:true}" data-component-name="DirectMessageToDOM"></div><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://devleader.substack.com/p/the-facade-design-pattern-in-c-how/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a class="button primary" href="https://devleader.substack.com/p/the-facade-design-pattern-in-c-how/comments"><span>Leave a comment</span></a></p></li></ul>]]></content:encoded></item></channel></rss>